<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | House of Rails]]></title>
  <link href="http://andrewhouse.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://andrewhouse.github.io/"/>
  <updated>2014-10-18T09:19:05-04:00</updated>
  <id>http://andrewhouse.github.io/</id>
  <author>
    <name><![CDATA[Andrew House]]></name>
    <email><![CDATA[andrewhouse621@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Crazy Easy Gravatars]]></title>
    <link href="http://andrewhouse.github.io/blog/2014/08/29/crazy-easy-gravatars/"/>
    <updated>2014-08-29T14:24:22-04:00</updated>
    <id>http://andrewhouse.github.io/blog/2014/08/29/crazy-easy-gravatars</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/chrislloyd/gravtastic">Gravtastic</a> saves a ton of headaches when wanting a gravatar.<br>
In 4 lines of code (seriously 4) I had a gravatar up and running on my app.
Here&rsquo;s how. <br></p>

<h3>Getting Started</h3>


<p>Keep in mind, gravtastic relies on Devise to work. So all of the instructions are
to be used after Devise is setup.<br>
Go ahead and add the gem gravtastic to your Gemfile.
<figure class='code'><figcaption><span>Gemfile <a href="https://github.com/chrislloyd/gravtastic">https://github.com/chrislloyd/gravtastic</a> </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">gravtastic</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>
<br>
As always, make sure to bundle after installing a gem.
<figure class='code'><figcaption><span>Terminal <a href="https://github.com/chrislloyd/gravtastic">https://github.com/chrislloyd/gravtastic</a> </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">bundle</span>
</span></code></pre></td></tr></table></div></figure>
<br></p>

<h3>Implementation</h3>


<p>Now we need to make sure our model uses gravtastic. Your file may be different
depending on what you named your devise model.
I&rsquo;m going to name mine User and generate the code on that premise.
<figure class='code'><figcaption><span>app/models/user.rb <a href="https://github.com/chrislloyd/gravtastic">https://github.com/chrislloyd/gravtastic</a> </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Gravtastic</span>
</span><span class='line'>  <span class="n">gravtastic</span>
</span><span class='line'>  <span class="o">&amp;</span><span class="n">hellip</span><span class="p">;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>
<br>
With that gravtastic has been able to hook into your devise model. Hooray!
The last job is rendering the gravatar to the view.<br>
I&rsquo;m using Haml, so the html syntax may be weird. If you&rsquo;re using Erb, just
replace the = with &lt;%= and end the line with %></p>

<p><figure class='code'><figcaption><span>app/views/whicheverview.html.haml <a href="https://github.com/chrislloyd/gravtastic">https://github.com/chrislloyd/gravtastic</a> </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haml'><span class='line'><span class="p">=</span><span class="n">image_tag</span> <span class="n">current_user</span><span class="o">.</span><span class="n">gravatar_url</span>
</span></code></pre></td></tr></table></div></figure>
<br>
That&rsquo;s it!<br>
Now a gravatar should be rendering on your page.
If you want to adjust the size you can pass a size option on gravtastic in the model.
The specifics of different options to use can be found on
the <a href="https://github.com/chrislloyd/gravtastic">Gravtastic Github Page</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Homework App]]></title>
    <link href="http://andrewhouse.github.io/blog/2014/08/18/homework-app/"/>
    <updated>2014-08-18T15:40:16-04:00</updated>
    <id>http://andrewhouse.github.io/blog/2014/08/18/homework-app</id>
    <content type="html"><![CDATA[<p>I built an app which some of my fellow students can use as a medium to give
progress on their homework assignments.<br>
<a href="http://tiy-homework.herokuapp.com">My App</a> uses Devise for registering users,
Heroku as the means for depoloyment, and a vast array of fun gems.
The whole point of the app is that there is a central place where our teacher
(James Dabbs) can check our homework progress.
James is the only authorized user (admin) capable of making new assignments.
Then each student can update the status of their homework by selecting a created
assignment, post the link of their website, and check to see if the assignment
has been completed.<br><br>
I think it works pretty well, all of the CSS was done with the help of
<a href="http://getbootstrap.com/">Twitter Bootstrap</a>. If you are interested in
checking out my code, I have it posted on <a href="https://github.com/andrewhouse/TIY-Homework-Checker">Github</a>.
<br>
But yea, making apps are fun. I had a lot of challenges in this app.
Something different I did in this that I had never done before was implementing
a has_many_through relationship.
It required me to do quite a bit of reading to see how each piece interacted,
but in the end it was totally worth it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gem Choices]]></title>
    <link href="http://andrewhouse.github.io/blog/2014/08/13/gem-choices/"/>
    <updated>2014-08-13T16:37:02-04:00</updated>
    <id>http://andrewhouse.github.io/blog/2014/08/13/gem-choices</id>
    <content type="html"><![CDATA[<p>Gem&rsquo;s make my Rails world go round. <br>
However, there are so many gems around that it would take entirely too long
to comb through them all.
I do have a method that helps me select certain gems from others. <br>
<strong>Documentation.</strong><br>
If a gem is lacking in how-to&rsquo;s, tutorials, or efficient documentation-I
typically skip over it.
For example, one of my favorite gems is <a href="https://github.com/plataformatec/simple_form">Simple Form</a>.
Simple Form allows forms to be a little easier to read.
My favorite part about it?<br>
Look at all of that documenation on the Github page.<br>
I love it.
There have been situations where I use gems that don&rsquo;t have great documentation.
Typically that is when I&rsquo;m desperate for something and have exhausted my resources.
Odds are, the gem is a failure and I crawl into a little hole for a few minutes.
Alas, gems are great to use and their documentation/codebase allows for steady
knowledge and easy implementation.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sinatra Is Fun]]></title>
    <link href="http://andrewhouse.github.io/blog/2014/08/11/sinatra-is-fun/"/>
    <updated>2014-08-11T21:09:49-04:00</updated>
    <id>http://andrewhouse.github.io/blog/2014/08/11/sinatra-is-fun</id>
    <content type="html"><![CDATA[<p>I never really gave Sinatra a chance. <br>
After reading articles after articles about how much better Rails is than
Sinatra, I kind of swept it under the rug.
I was sooooo wrong. <br>
Sinatra is crazy light weight.
Not as many bells, whistles, and not near as many headaches that come with Rails.
It&rsquo;s simplistic, and I like that.
Today I built <a href="http://andrew-sinatra.herokuapp.com/" title="Andrew House - Sinatra">a fun Sinatra app</a>
and I had a really great time.
I didn&rsquo;t try to make it too complicated, just trying to get used to haml and
getting into the groove of how sinatra should feel.<br><br>
I enjoyed how some of the magic that you take for granted in Rails is peeled
apart in Sinatra.
Making my own get/post requests and assigning routes was fun.
I may be overplaying it, and I know how beneficial rails will be when I take
on a larger app. But I have to say that now I will turn to sinatra for low
level simplistic apps. Kudos to James for making us play with Sinatra.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Starting Over]]></title>
    <link href="http://andrewhouse.github.io/blog/2014/08/08/starting-over/"/>
    <updated>2014-08-08T23:37:13-04:00</updated>
    <id>http://andrewhouse.github.io/blog/2014/08/08/starting-over</id>
    <content type="html"><![CDATA[<p>I LOVE to play around with new features. <br>
Tonight I was playing around with omniauth-github and trying to log in via rails.
I was able to log in (horray!), but I had forgotten what I was supposed to be
doing initially.
It happens to me every now and then; I get feature focused. <br><br>
I&rsquo;m so focused on getting this one little thing to work I lose track of
my goal. It&rsquo;s times like this, when I&rsquo;m barely into the project, and I was
able to get my feature to work.
I find that it&rsquo;s best to scrap it and start over.
My reasoning?<br>
  <li>Start on a path where I am able to remain focused.
  <li>When it is time to create the feature again; I will do it again from scratch,
forcing myself to learn.
  <li>In future projects, I will know to be well prepared and focused from the get go.
<br><br>
Long story short. <br>
I played around with a cool thing, got it to work, messed up, started over, and
didn&rsquo;t loose any passion.
Not a bad thing if you ask me.
I&rsquo;ll learn, grow, and do a better job next time.</p>
]]></content>
  </entry>
  
</feed>
