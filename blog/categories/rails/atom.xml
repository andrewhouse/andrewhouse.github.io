<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails | House of Rails]]></title>
  <link href="http://andrewhouse.github.io/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://andrewhouse.github.io/"/>
  <updated>2014-08-29T14:36:11-04:00</updated>
  <id>http://andrewhouse.github.io/</id>
  <author>
    <name><![CDATA[Andrew House]]></name>
    <email><![CDATA[andrewhouse621@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Building an API With Rails]]></title>
    <link href="http://andrewhouse.github.io/blog/2014/08/28/building-an-api-with-rails/"/>
    <updated>2014-08-28T16:10:35-04:00</updated>
    <id>http://andrewhouse.github.io/blog/2014/08/28/building-an-api-with-rails</id>
    <content type="html"><![CDATA[<p>I think API&rsquo;s are amazing.<br>
It&rsquo;s kind of weird how much I&rsquo;m into API&rsquo;s lately.
Yet, I&rsquo;ve only technically made one (and oh my goodness was it a small one).
I hold much value in the flexibility that an API provides.
To be able to talk to multiple devises in different languages by only providing
the necessary data.<br><br>
Data is my thing.<br><br>
It&rsquo;s nice not having to worry about making anything pretty.
If I want to see if my data is working the way I want I can just do a quick curl.
I&rsquo;m currently having a problem figuring out authenticity tokens.
But that is okay, it&rsquo;s just another hurdle to overcome.<br><br>
When I can easily implement an API I feel as though my self worth will go up drastically.
Reason being, at The Iron Yard in Atlanta there are 3 cohorts (currently 2
  since the front end class just graduated) and a well developed API
  could easily tie together all 3 classes.
How cool is that?
To be able to work with multiple people on a singular project.<br>
All because data is badass.<br><br>
I look forward to creating amazing API&rsquo;s in the future and look forward to
understanding enough Angular JS to be able to call on my API&rsquo;s information.
Doing Full Stack work sounds like a lot of work and would be a ton of fun.<br>
I&rsquo;m excited about the future.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning by Doing]]></title>
    <link href="http://andrewhouse.github.io/blog/2014/08/21/learning-by-doing/"/>
    <updated>2014-08-21T09:02:02-04:00</updated>
    <id>http://andrewhouse.github.io/blog/2014/08/21/learning-by-doing</id>
    <content type="html"><![CDATA[<p>I have a problem when it comes to learning new skills/languages.<br>
I am very theoretical minded person in a sense that I could read and watch
videos about anything and be content.
However, I have found that knowledge doesn&rsquo;t stick as well with me if I don&rsquo;t
implement what I have learned.<br><br>
Example:<br>
I&rsquo;m in the process of learning <a href="http://iamandrewhouse.com/blog/2014/08/19/starting-angular-js/">Angular Js</a>
and a few months ago I did the Code School course.
When going over the course again, I noticed that I remembered a lot of theory.
Things like, I&rsquo;m able to make controllers in a separate JS file and integrate
them into the HTML directly. Little detailed parts of a whole I remembered, but
when it came to actual implementation I had forgotten the majority of it.
That allowed me to catch up fairly quickly on what I was doing, I felt
when I was learning it again a kind of snowball effect.
Where everything felt strange at first, but the more I did the quicker it
came back to me.
However, I don&rsquo;t want to fall that far back again.
So this time I&rsquo;m going to try a much different strategy.<br><br></p>

<!-- more -->


<p>I&rsquo;ve decided on the majority of the Rails apps that I am going to be building
in my upcoming weeks at The Iron Yard, that I would try to integrate Angular JS
into my front end if just a little bit.
Constantly reminding myself of what it is, how to use it, and how to use its
incredibly responsive design to the optimal efficiency.
I feel like I need to retain what I am learning by keeping on using it.
It seems pretty basic, but it will be effort to constantly be using it and
integrating it into my designs.
Eventually I feel like I will be comfortable enough to not be integrating
Angular JS into Rails, but develop API&rsquo;s with Rails and have Angular call
the JSON data returned and have two separate entities.
This is where I want to be and what I want to develop. <br><br>
I feel strongly about taking my Rails applications towards an API path.
To me, this is where the power of Rails really comes in.
To be able to quickly and efficiently build an API and let multiple
mediums use the data that I create.
One of the other classes at The Iron Yard is an IOS class.
Here in the upcoming weeks we are going to be doing an internal Hackathon,
being able for all of us to use our skills together.
I want to be able to make an API that is usable by IOS, front-end, etc etc.
This excites me greatly.
I have a path and I&rsquo;m looking forward to walking it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Homework App]]></title>
    <link href="http://andrewhouse.github.io/blog/2014/08/18/homework-app/"/>
    <updated>2014-08-18T15:40:16-04:00</updated>
    <id>http://andrewhouse.github.io/blog/2014/08/18/homework-app</id>
    <content type="html"><![CDATA[<p>I built an app which some of my fellow students can use as a medium to give
progress on their homework assignments.<br>
<a href="http://tiy-homework.herokuapp.com">My App</a> uses Devise for registering users,
Heroku as the means for depoloyment, and a vast array of fun gems.
The whole point of the app is that there is a central place where our teacher
(James Dabbs) can check our homework progress.
James is the only authorized user (admin) capable of making new assignments.
Then each student can update the status of their homework by selecting a created
assignment, post the link of their website, and check to see if the assignment
has been completed.<br><br>
I think it works pretty well, all of the CSS was done with the help of
<a href="http://getbootstrap.com/">Twitter Bootstrap</a>. If you are interested in
checking out my code, I have it posted on <a href="https://github.com/andrewhouse/TIY-Homework-Checker">Github</a>.
<br>
But yea, making apps are fun. I had a lot of challenges in this app.
Something different I did in this that I had never done before was implementing
a has_many_through relationship.
It required me to do quite a bit of reading to see how each piece interacted,
but in the end it was totally worth it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Figaro]]></title>
    <link href="http://andrewhouse.github.io/blog/2014/08/14/figaro/"/>
    <updated>2014-08-14T10:12:31-04:00</updated>
    <id>http://andrewhouse.github.io/blog/2014/08/14/figaro</id>
    <content type="html"><![CDATA[<p>Once upon a time when I didn&rsquo;t know what I was doing.<br>
I was trying to setup a rails app for my wife and have her family upload
images and a birthday message.
After some research, I decided to use Amazon Web Services to host my images.
I got it configured in my rails app with Paperclip and that is when I made
a fatal, fatal, fatal error.<br><br>
I put in my bucketname and password directly into my code.<br><br>
The following morning, I received a call from Amazon.
Confirming whether I had setup 5 instances across the world racking up $250
overnight.<br>
I freaked out a little.<br>
After getting that resolved, I searched for how I can avoid making that
stupid mistake again.
My research turned up a gem called <strong>Figaro</strong>.<br>
<a href="https://github.com/laserlemon/figaro">Figaro</a> is used to hide confidential information.
Usernames, passwords, you name it and it will store the variables in a file
that will be automatically ignored from git and can easily be configured
for <a href="http://heroku.com">Heroku</a>. <br></p>

<h3>Getting Started</h3>


<p>As always, you want to start by adding Figaro to your Gemfile.
<figure class='code'><figcaption><span>Gemfile <a href="https://github.com/laserlemon/figaro">https://github.com/laserlemon/figaro</a> </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">figaro</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<!-- more -->


<p><em>Note: Always run bundle after changing your gemfile</em><br><br>
Next we will bundle our gems for use.
<figure class='code'><figcaption><span>Terminal <a href="https://github.com/laserlemon/figaro">https://github.com/laserlemon/figaro</a> </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">bundle</span>
</span></code></pre></td></tr></table></div></figure>
<em>Note: bundle is shorthand for bundle install.</em><br></p>

<h3>Generating and Using Figaro Logic</h3>


<p>The Figaro gem comes with a generator that will have rails install the
<em>&lsquo;./config/application.yml&rsquo;</em> file, and add it to the git ignore list.
<figure class='code'><figcaption><span>Terminal <a href="https://github.com/laserlemon/figaro">https://github.com/laserlemon/figaro</a> </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">rails g figaro:install</span>
</span></code></pre></td></tr></table></div></figure>
<em>Note: g is short for generate.</em><br><br>
Now it&rsquo;s time for the magic.<br>
Open up <em>&lsquo;./config/application.yml&rsquo;</em>.
I&rsquo;ll be assuming that you are trying to setup a mailer and need your Gmail
username and password.
<figure class='code'><figcaption><span>config/application.yml <a href="https://github.com/laserlemon/figaro">https://github.com/laserlemon/figaro</a> </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">GMAIL_USERNAME</span><span class="p">:</span> <span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s2">&quot;&amp;#x6d;&amp;#97;&amp;#105;&amp;#108;&amp;#x74;&amp;#x6f;&amp;#58;&amp;#x74;&amp;#101;&amp;#115;&amp;#116;&amp;#x64;&amp;#x75;&amp;#x6d;&amp;#x6d;&amp;#x79;&amp;#x40;&amp;#103;&amp;#109;&amp;#x61;&amp;#105;&amp;#x6c;&amp;#x2e;&amp;#x63;&amp;#111;&amp;#x6d;&quot;</span><span class="o">&gt;&amp;</span><span class="c1">#116;&amp;#101;&amp;#x73;&amp;#x74;&amp;#100;&amp;#117;&amp;#x6d;&amp;#109;&amp;#121;&amp;#x40;&amp;#103;&amp;#x6d;&amp;#97;&amp;#105;&amp;#x6c;&amp;#46;&amp;#x63;&amp;#111;&amp;#109;&lt;/a&gt;</span>
</span><span class='line'><span class="ss">GMAIL_PASSWORD</span><span class="p">:</span> <span class="n">password123456</span>
</span></code></pre></td></tr></table></div></figure>
These files are now able to be accessed via
<a href="http://www.ruby-doc.org/core-2.1.2/ENV.html">Environment Variables</a>.
Environment variables can be called in any of your rails files.
Normally, you can access Environment Variables one way.
<figure class='code'><figcaption><span>Ruby Code <a href="https://github.com/laserlemon/figaro">https://github.com/laserlemon/figaro</a> </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">ENV</span><span class="o">[&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="no">GMAIL_USERNAME</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>
<em>Note: All Caps are critical.</em><br><br>
This will render <em>testdummy@gmail.com</em> wherever the environment variable is
envoked.
A way of calling environment variables through Figaro is to use their syntax.
<figure class='code'><figcaption><span>Ruby Code <a href="https://github.com/laserlemon/figaro">https://github.com/laserlemon/figaro</a> </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Figaro</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">gmail_username</span>
</span></code></pre></td></tr></table></div></figure>
Now instead of caps, brackets, and quotations; it is a simple method call.</p>

<h3>Multiple Environments</h3>


<p>Figaro allows the use of different variables in different environments.
For example, in the Gmail example; let&rsquo;s say you want to have a test email
address for development, but a special email account for production emails.
For figaro it&rsquo;s a simple setup.
<figure class='code'><figcaption><span>config/application.yml <a href="https://github.com/laserlemon/figaro">https://github.com/laserlemon/figaro</a> </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">development</span><span class="p">:</span>
</span><span class='line'>  <span class="ss">GMAIL_USERNAME</span><span class="p">:</span> <span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s2">&quot;&amp;#109;&amp;#x61;&amp;#x69;&amp;#x6c;&amp;#x74;&amp;#111;&amp;#x3a;&amp;#116;&amp;#101;&amp;#115;&amp;#116;&amp;#x64;&amp;#117;&amp;#x6d;&amp;#109;&amp;#x79;&amp;#x40;&amp;#103;&amp;#x6d;&amp;#x61;&amp;#105;&amp;#108;&amp;#x2e;&amp;#x63;&amp;#111;&amp;#x6d;&quot;</span><span class="o">&gt;&amp;</span><span class="c1">#116;&amp;#x65;&amp;#115;&amp;#x74;&amp;#x64;&amp;#x75;&amp;#109;&amp;#109;&amp;#121;&amp;#64;&amp;#103;&amp;#x6d;&amp;#97;&amp;#105;&amp;#x6c;&amp;#x2e;&amp;#x63;&amp;#x6f;&amp;#109;&lt;/a&gt;</span>
</span><span class='line'>  <span class="ss">GMAIL_PASSWORD</span><span class="p">:</span> <span class="n">password123456</span>
</span><span class='line'><span class="ss">production</span><span class="p">:</span>
</span><span class='line'>  <span class="ss">GMAIL_USERNAME</span><span class="p">:</span> <span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s2">&quot;&amp;#x6d;&amp;#x61;&amp;#x69;&amp;#x6c;&amp;#116;&amp;#111;&amp;#58;&amp;#115;&amp;#117;&amp;#x70;&amp;#101;&amp;#x72;&amp;#97;&amp;#x77;&amp;#101;&amp;#x73;&amp;#111;&amp;#x6d;&amp;#x65;&amp;#64;&amp;#x67;&amp;#x6d;&amp;#x61;&amp;#105;&amp;#108;&amp;#x2e;&amp;#x63;&amp;#x6f;&amp;#x6d;&quot;</span><span class="o">&gt;&amp;</span><span class="c1">#115;&amp;#x75;&amp;#112;&amp;#x65;&amp;#114;&amp;#97;&amp;#x77;&amp;#101;&amp;#115;&amp;#x6f;&amp;#109;&amp;#x65;&amp;#64;&amp;#103;&amp;#x6d;&amp;#x61;&amp;#105;&amp;#108;&amp;#46;&amp;#x63;&amp;#111;&amp;#109;&lt;/a&gt;</span>
</span><span class='line'>  <span class="ss">GMAIL_PASSWORD</span><span class="p">:</span> <span class="n">W</span><span class="vg">$aIk91</span><span class="err">@</span><span class="mi">45</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">lkM</span>
</span></code></pre></td></tr></table></div></figure>
</em>Note: The indentation is critical.*<br><br>
That is all.<br>
Figaro and Rails will know which environment you&rsquo;re in and use that particular
username and password.</p>

<h3>Setting up for Heroku</h3>


<p>Let&rsquo;s say that you are wanting to deploy your app through Heroku, but don&rsquo;t know
how the environment variables can be setup on the remote server.<br>
No fear!<br>
A simple command and figaro will take care of it for you.
<figure class='code'><figcaption><span>Terminal <a href="https://github.com/laserlemon/figaro">https://github.com/laserlemon/figaro</a> </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">rake figaro:heroku</span>
</span></code></pre></td></tr></table></div></figure>
BOOM.<br>
Your environment variables have been setup on Heroku.
If you wanted to confirm that they&rsquo;re setup all nice and tidy.
After deploying to heroku, <a href="https://devcenter.heroku.com/articles/config-vars">type in the command</a>.
<figure class='code'><figcaption><span>Terminal <a href="https://github.com/laserlemon/figaro">https://github.com/laserlemon/figaro</a> </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">heroku config</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3>Go Play!</h3>


<p>Now figaro has been installed on your Rails app, you can deploy easily to heroku,
and your information has not been compromised.
I&rsquo;d call that a pretty good day.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Twitter Bootstrap Rails]]></title>
    <link href="http://andrewhouse.github.io/blog/2014/08/13/twitter-bootstrap-rails/"/>
    <updated>2014-08-13T17:38:02-04:00</updated>
    <id>http://andrewhouse.github.io/blog/2014/08/13/twitter-bootstrap-rails</id>
    <content type="html"><![CDATA[<p>Being entirely void of creativity, the <a href="https://github.com/seyhunak/twitter-bootstrap-rails">Twitter Bootstrap Rails Gem</a>
is amazing.<br>
I use Twitter Bootstrap(bootstrap for short) to generate basic layouts so I
can get a handle on how things can possibly look.
Not to mention, it gives an amazing starting point for building good looking css.
If you visit the <a href="http://getbootstrap.com/components/">Twitter Bootstrap Home Page</a>,
you can see all of the styles you can create.
If you are a beginniner, ignore anything and everything Javascript related.
Stick primarily to the CSS and Components page and customize your page with
their features.
A little pizzazz goes a long way ya&#8217; know. <br></p>

<h3>Getting Started</h3>


<p>I am assuming that you have a new rails project and are looking to add bootstrap
to that project.<br><br>
Let&rsquo;s start by adding the &lsquo;twitter-bootstrap-rails&rsquo; gem to the Gemfile.
<figure class='code'><figcaption><span>Gemfile <a href="https://github.com/seyhunak/twitter-bootstrap-rails">https://github.com/seyhunak/twitter-bootstrap-rails</a> </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">twitter</span><span class="o">-</span><span class="n">bootstrap</span><span class="o">-</span><span class="n">rails</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<!-- more -->


<p><strong>ALWAYS</strong> After you update your Gemfile in any way, run bundler.
Now open up your terminal/iTerm/command prompt.
The rest of generating default bootstrap logic will be done from the terminal.
<figure class='code'><figcaption><span>Terminal <a href="https://github.com/seyhunak/twitter-bootstrap-rails">https://github.com/seyhunak/twitter-bootstrap-rails</a> </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bundle install
</span></code></pre></td></tr></table></div></figure>
<em>Note: bundle is shorthand for bundle install.</em><br><br>
Next, we need to generate the bootstrap into our Rails app.
<figure class='code'><figcaption><span>Terminal <a href="https://github.com/seyhunak/twitter-bootstrap-rails">https://github.com/seyhunak/twitter-bootstrap-rails</a> </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rails generate bootstrap:install static
</span></code></pre></td></tr></table></div></figure>
<em>Note: g is shorthand for generate when Rails is the context.</em></p>

<h3>Generating the Default Layout Page</h3>


<p>Now bootstrap has been installed into your Rails app and you can access bootstrap
logic if you want to completely customize your page.
However, bootstrap can help generate default layouts for your application.html page and
the generated views.<br>
In order to generate a default layout page, you need to run the following.
<figure class='code'><figcaption><span>Terminal <a href="https://github.com/seyhunak/twitter-bootstrap-rails">https://github.com/seyhunak/twitter-bootstrap-rails</a> </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rails g bootstrap:layout application fluid -f
</span></code></pre></td></tr></table></div></figure>
<em>Note: You can run the code without the -f flag. All the flag will do is force the changes
so you don&rsquo;t have to repeatedly say yes to every little thing.</em><br><br>
<em>Note: If you have installed haml or slim and your application file uses those tags,
then bootstrap will install the layout in that format. Cool right?</em><br><br>
Now if you look at your application.html.erb(if you&rsquo;re using erb) you will notice
the drastic change to the html. Don&rsquo;t be afraid of all of the head logic.
Most of it is for mobile and meta data.
If you wanted to go ahead and customize your layout page, you can use
the css or components on the <a href="http://getbootstrap.com/components/">Twitter Bootstrap Page</a>.
If there are other types of bootstrap that you want to change.
For example, you hate the color of when you hover over your title on the navbar.
To make changes directly to the css go to <em>&lsquo;./app/assets/stylesheets/bootstrap_and_overrides.css&rsquo;</em>
and make your customizations there.<br></p>

<h3>Simple Form</h3>


<p>If you are using <a href="https://github.com/plataformatec/simple_form">Simple Form</a>,
there is a bootstrap generator for simple form. If you are thinking about
using simple form, do so <strong>before</strong> installing the default views. If not,
the view forms will be installed in the default form format.
<figure class='code'><figcaption><span>Gemfile <a href="https://github.com/plataformatec/simple_form">https://github.com/plataformatec/simple_form</a> </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">simple_form</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>
<em>Note: Remember to bundle after changing the Gemfile.</em><br>
<figure class='code'><figcaption><span>Terminal <a href="https://github.com/seyhunak/twitter-bootstrap-rails">https://github.com/seyhunak/twitter-bootstrap-rails</a> </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bundle
</span><span class='line'>rails g simple_form:install <span class="p">&amp;</span>ndash<span class="p">;</span>bootstrap
</span></code></pre></td></tr></table></div></figure></p>

<h3>Generating Default Views</h3>


<p>The synax for changing the layout of a set of views are.
<figure class='code'><figcaption><span>Terminal <a href="https://github.com/seyhunak/twitter-bootstrap-rails">https://github.com/seyhunak/twitter-bootstrap-rails</a> </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rails g bootstrap:themed <span class="o">[</span>RESOURCE_NAME<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>
Resource name is the name of the <em>controller</em> of which you would like the views
changed. Let&rsquo;s say that you want to make a Posts controller.
<figure class='code'><figcaption><span>Terminal <a href="https://github.com/seyhunak/twitter-bootstrap-rails">https://github.com/seyhunak/twitter-bootstrap-rails</a> </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rails g scaffold post title:string content:text
</span><span class='line'>rake db:migrate
</span><span class='line'>rails g bootstrap:themed posts -f
</span></code></pre></td></tr></table></div></figure>
<em>Note: The pluralization is critical.</em><br><br>
<em>Note: Once again, the -f flag is just for saving precious time, it&rsquo;s not necessary.</em><br><br>
Now if you look at the views under <em>&lsquo;./app/views/posts&rsquo;</em> the index and show will now be
in table format. The new and edit views will render the form page.
The form will have a great starting layout. <br></p>

<h3>Now the fun begins!</h3>


<p>This is the true starting point for customizing your page however you want.
The basics have been done, now you don&rsquo;t have an ugly beginning point.
Once again, reference the <a href="http://getbootstrap.com/components/">Twitter Bootstrap Page</a>
and make every little detail your own.</p>
]]></content>
  </entry>
  
</feed>
