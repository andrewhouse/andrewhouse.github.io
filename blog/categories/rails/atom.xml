<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails | House of Rails]]></title>
  <link href="http://andrewhouse.github.io/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://andrewhouse.github.io/"/>
  <updated>2014-08-08T23:45:21-04:00</updated>
  <id>http://andrewhouse.github.io/</id>
  <author>
    <name><![CDATA[Andrew House]]></name>
    <email><![CDATA[andrewhouse621@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Starting Over]]></title>
    <link href="http://andrewhouse.github.io/blog/2014/08/08/starting-over/"/>
    <updated>2014-08-08T23:37:13-04:00</updated>
    <id>http://andrewhouse.github.io/blog/2014/08/08/starting-over</id>
    <content type="html"><![CDATA[<p>I LOVE to play around with new features. <br>
Tonight I was playing around with omniauth-github and trying to log in via rails.
I was able to log in (horray!), but I had forgotten what I was supposed to be
doing initially.
It happens to me every now and then; I get feature focused. <br><br>
I&rsquo;m so focused on getting this one little thing to work I lose track of
my goal. It&rsquo;s times like this, when I&rsquo;m barely into the project, and I was
able to get my feature to work.
I find that it&rsquo;s best to scrap it and start over.
My reasoning?<br>
  <li>Start on a path where I am able to remain focused.
  <li>When it is time to create the feature again; I will do it again from scratch,
forcing myself to learn.
  <li>In future projects, I will know to be well prepared and focused from the get go.
<br><br>
Long story short. <br>
I played around with a cool thing, got it to work, messed up, started over, and
didn&rsquo;t loose any passion.
Not a bad thing if you ask me.
I&rsquo;ll learn, grow, and do a better job next time.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Being Object Oriented]]></title>
    <link href="http://andrewhouse.github.io/blog/2014/08/07/being-object-oriented/"/>
    <updated>2014-08-07T10:02:29-04:00</updated>
    <id>http://andrewhouse.github.io/blog/2014/08/07/being-object-oriented</id>
    <content type="html"><![CDATA[<p>I love designing classes in an Object Oriented fashion.
It gives a good feeling, like there aren&rsquo;t just a bunch of empty method.
Each method belongs to something larger, each piece makes the whole complete.
Object Oriented Programming (OOP) just makes sense to me.<!-- more --> <br><br>
I like to think of classes as factories.
Each factory pumps out a special part thats essential for the whole.
The combination of all of the parts produced by the factories make a larger
object.
Attacking problems this way helps me pre-debug(defensive coding) the situation.
Doing so makes it easier to debug, read, and understand.
<br><br>
Even when not specifically designing Object Oriented features, I still
think of designing projects like objects.
Let&rsquo;s say I&rsquo;m building a rails app.
At the top level there is the MVC(model, view, controller).
From there I break it down into pieces.
Each view has several HTML &amp; CSS files.
Each HTML can have partials, their own css stylings, etc.
I keep breaking every piece down and down to make every little bit easier to
understand.
To me, designing this way helps maintain my sanity and keep organized.<br></p>

<p>Objects are my friends, and designing in such a way isn&rsquo;t too hard of a task.
Just be mindful of the roles each object plays, name them accordingly, and
create the puzzle that holds all the pieces perfectly.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Ruby Chose Me]]></title>
    <link href="http://andrewhouse.github.io/blog/2014/08/06/how-ruby-chose-me/"/>
    <updated>2014-08-06T08:49:11-04:00</updated>
    <id>http://andrewhouse.github.io/blog/2014/08/06/how-ruby-chose-me</id>
    <content type="html"><![CDATA[<p>Javascript was my first programming language.
While it was fun to use, it was also very syntax heavy.
The amount of ()&rsquo;s and {}&rsquo;s pretty much drove me insane.  <br>
After learning the basics of Javascript I started to look for other
languages that would be relevant to my goal of web development.
I had come to learn how Javascript was incredibly important making web
pages function, and I wanted to learn the skills to drive the essential
pieces that run in the background. That&rsquo;s right, I wanted to take a look
into the back-end. <br></p>

<!-- more -->


<p>After researching for countless days I finally stumbled upon Ruby on Rails.
It seemed that Rails was a great way to start looking into the backend.
However, the majority of places I saw said to absolutly not start Rails
until I was fluent in Ruby.
Then a lightbulb moment came.
I remember seeing a Ruby course when I was going over the Javascript codeacademy
course.
There I went, headfirst into Ruby without a clue of what it was.<br><br>
I thought Ruby was joking with me.
Hardly any ()&rsquo;s and only {}&rsquo;s with hashes and blocks. Are you serious?
It was fluid, less verbose, and object oriented.
I fell head over heels.
From that point on I focused mainly on Ruby and learning how to properly structure
methods, classes, and everything I could.
I&rsquo;ve got to the point to where just getting something to work the way I want to isn&rsquo;t
enought, I need to have it be in best practice.
Using proper standards and conventions adopted by professionals.
Ruby is a ton of fun.
I&rsquo;m incredibly passionate about it and it has made me a more passionate developer.<br><br>
Ruby pulled me into it&rsquo;s world and I couldn&rsquo;t be happier.
From there I went to learn basic Rails and make a few web apps of my own.
Currently, I am attending the IronYard in Atlanta, GA to learn more
advanced Ruby and Rails.
By the end of this I feel I will be absolutely be prepared to be a critical
asset to any team. <br><br>
I have Ruby to thank for all of it.</p>
]]></content>
  </entry>
  
</feed>
