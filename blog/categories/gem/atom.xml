<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Gem | House of Rails]]></title>
  <link href="http://andrewhouse.github.io/blog/categories/gem/atom.xml" rel="self"/>
  <link href="http://andrewhouse.github.io/"/>
  <updated>2014-09-25T09:08:40-04:00</updated>
  <id>http://andrewhouse.github.io/</id>
  <author>
    <name><![CDATA[Andrew House]]></name>
    <email><![CDATA[andrewhouse621@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Crazy Easy Gravatars]]></title>
    <link href="http://andrewhouse.github.io/blog/2014/08/29/crazy-easy-gravatars/"/>
    <updated>2014-08-29T14:24:22-04:00</updated>
    <id>http://andrewhouse.github.io/blog/2014/08/29/crazy-easy-gravatars</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/chrislloyd/gravtastic">Gravtastic</a> saves a ton of headaches when wanting a gravatar.<br>
In 4 lines of code (seriously 4) I had a gravatar up and running on my app.
Here&rsquo;s how. <br></p>

<h3>Getting Started</h3>


<p>Keep in mind, gravtastic relies on Devise to work. So all of the instructions are
to be used after Devise is setup.<br>
Go ahead and add the gem gravtastic to your Gemfile.
{% codeblock Gemfile lang:ruby <a href="https://github.com/chrislloyd/gravtastic">https://github.com/chrislloyd/gravtastic</a> %}
gem &lsquo;gravtastic&rsquo;
{% endcodeblock %}
<br>
As always, make sure to bundle after installing a gem.
{% codeblock Terminal lang:console <a href="https://github.com/chrislloyd/gravtastic">https://github.com/chrislloyd/gravtastic</a> %}
bundle
{% endcodeblock %}
<br></p>

<h3>Implementation</h3>


<p>Now we need to make sure our model uses gravtastic. Your file may be different
depending on what you named your devise model.
I&rsquo;m going to name mine User and generate the code on that premise.
{% codeblock app/models/user.rb lang:ruby <a href="https://github.com/chrislloyd/gravtastic">https://github.com/chrislloyd/gravtastic</a> %}
class User &lt; ActiveRecord::Base
  include Gravtastic
  gravtastic
  &hellip;
end
{% endcodeblock %}
<br>
With that gravtastic has been able to hook into your devise model. Hooray!
The last job is rendering the gravatar to the view.<br>
I&rsquo;m using Haml, so the html syntax may be weird. If you&rsquo;re using Erb, just
replace the = with &lt;%= and end the line with %></p>

<p>{% codeblock app/views/whicheverview.html.haml lang:haml <a href="https://github.com/chrislloyd/gravtastic">https://github.com/chrislloyd/gravtastic</a> %}
=image_tag current_user.gravatar_url
{% endcodeblock %}
<br>
That&rsquo;s it!<br>
Now a gravatar should be rendering on your page.
If you want to adjust the size you can pass a size option on gravtastic in the model.
The specifics of different options to use can be found on
the <a href="https://github.com/chrislloyd/gravtastic">Gravtastic Github Page</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing for Dummies]]></title>
    <link href="http://andrewhouse.github.io/blog/2014/08/27/testing-for-dummies/"/>
    <updated>2014-08-27T08:56:38-04:00</updated>
    <id>http://andrewhouse.github.io/blog/2014/08/27/testing-for-dummies</id>
    <content type="html"><![CDATA[<p>I suck at testing.<br>
There are some things that click, and some that don&rsquo;t.
For me, testing doesn&rsquo;t click.
I understand the benefit of it, helping getting my thoughts in order and
drive code in a structured way.
I don&rsquo;t know if its the specific DSL of using rspec, or what.
But I am not good at it (yet).<br><br>
Since testing is my achilles heel, I&rsquo;ve decided to make it my prerogative
to get it down.
I don&rsquo;t want to back away from a challenge just because I don&rsquo;t get it at first.
It&rsquo;s completely okay that I&rsquo;m not good at testing right now.
The reason I&rsquo;m at The Iron Yard is because I don&rsquo;t have all the skills required
to be a proficient Junior Rails Developer at my current level.
That&rsquo;s why I&rsquo;m going to use the time that I have here to master any skills
that I&rsquo;m not good at.
Testing is currently at the top of my list.
Once I get it down (and I will get it down) I&rsquo;ll move on to the next beast.
Keep knocking them down one after another until I feel confident doing what I&rsquo;m doing.
Then when I&rsquo;m confident, look at some amazing code that I don&rsquo;t understand
and begin the journey again.
Learning is an ongoing process and it&rsquo;s something that is needed by a
web engineer.
To be able to continuously challenge myself and push into the next technology.
Adapting, evolving, and challenging.
Three things that I love to do and will continue to do for as long as I can.<br>
Coding is fun.
Always changing and never perfect.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Figaro]]></title>
    <link href="http://andrewhouse.github.io/blog/2014/08/14/figaro/"/>
    <updated>2014-08-14T10:12:31-04:00</updated>
    <id>http://andrewhouse.github.io/blog/2014/08/14/figaro</id>
    <content type="html"><![CDATA[<p>Once upon a time when I didn&rsquo;t know what I was doing.<br>
I was trying to setup a rails app for my wife and have her family upload
images and a birthday message.
After some research, I decided to use Amazon Web Services to host my images.
I got it configured in my rails app with Paperclip and that is when I made
a fatal, fatal, fatal error.<br><br>
I put in my bucketname and password directly into my code.<br><br>
The following morning, I received a call from Amazon.
Confirming whether I had setup 5 instances across the world racking up $250
overnight.<br>
I freaked out a little.<br>
After getting that resolved, I searched for how I can avoid making that
stupid mistake again.
My research turned up a gem called <strong>Figaro</strong>.<br>
<a href="https://github.com/laserlemon/figaro">Figaro</a> is used to hide confidential information.
Usernames, passwords, you name it and it will store the variables in a file
that will be automatically ignored from git and can easily be configured
for <a href="http://heroku.com">Heroku</a>. <br></p>

<h3>Getting Started</h3>


<p>As always, you want to start by adding Figaro to your Gemfile.
{% codeblock Gemfile lang:ruby <a href="https://github.com/laserlemon/figaro">https://github.com/laserlemon/figaro</a> %}
gem &lsquo;figaro&rsquo;
{% endcodeblock %}</p>

<!-- more -->


<p><em>Note: Always run bundle after changing your gemfile</em><br><br>
Next we will bundle our gems for use.
{% codeblock Terminal lang:console <a href="https://github.com/laserlemon/figaro">https://github.com/laserlemon/figaro</a> %}
bundle
{% endcodeblock %}
<em>Note: bundle is shorthand for bundle install.</em><br></p>

<h3>Generating and Using Figaro Logic</h3>


<p>The Figaro gem comes with a generator that will have rails install the
<em>&lsquo;./config/application.yml&rsquo;</em> file, and add it to the git ignore list.
{% codeblock Terminal lang:console <a href="https://github.com/laserlemon/figaro">https://github.com/laserlemon/figaro</a> %}
figaro install
{% endcodeblock %}
<em>UPDATE: with the new version of Figaro, the old &lsquo;rails g figaro:install&rsquo; command
no longer works. Use the new &lsquo;figaro install&rsquo; to get application.yml and ignored.</em><br>
<em>Note: g is short for generate.</em><br><br>
Now it&rsquo;s time for the magic.<br>
Open up <em>&lsquo;./config/application.yml&rsquo;</em>.
I&rsquo;ll be assuming that you are trying to setup a mailer and need your Gmail
username and password.
{% codeblock config/application.yml lang:ruby <a href="https://github.com/laserlemon/figaro">https://github.com/laserlemon/figaro</a> %}
GMAIL_USERNAME: <a href="&#109;&#97;&#x69;&#x6c;&#x74;&#111;&#58;&#116;&#101;&#115;&#116;&#100;&#117;&#109;&#109;&#121;&#x40;&#x67;&#x6d;&#97;&#105;&#x6c;&#46;&#99;&#111;&#x6d;">&#116;&#x65;&#115;&#116;&#100;&#117;&#109;&#x6d;&#x79;&#x40;&#103;&#109;&#x61;&#105;&#108;&#x2e;&#99;&#x6f;&#x6d;</a>
GMAIL_PASSWORD: password123456
{% endcodeblock %}
These files are now able to be accessed via
<a href="http://www.ruby-doc.org/core-2.1.2/ENV.html">Environment Variables</a>.
Environment variables can be called in any of your rails files.
Normally, you can access Environment Variables one way.
{% codeblock Ruby Code lang:ruby <a href="https://github.com/laserlemon/figaro">https://github.com/laserlemon/figaro</a> %}
ENV[&ldquo;GMAIL_USERNAME&rdquo;]
{% endcodeblock %}
<em>Note: All Caps are critical.</em><br><br>
This will render <em>testdummy@gmail.com</em> wherever the environment variable is
envoked.
A way of calling environment variables through Figaro is to use their syntax.
{% codeblock Ruby Code lang:ruby <a href="https://github.com/laserlemon/figaro">https://github.com/laserlemon/figaro</a> %}
Figaro.env.gmail_username
{% endcodeblock %}
Now instead of caps, brackets, and quotations; it is a simple method call.</p>

<h3>Multiple Environments</h3>


<p>Figaro allows the use of different variables in different environments.
For example, in the Gmail example; let&rsquo;s say you want to have a test email
address for development, but a special email account for production emails.
For figaro it&rsquo;s a simple setup.
{% codeblock config/application.yml lang:ruby <a href="https://github.com/laserlemon/figaro">https://github.com/laserlemon/figaro</a> %}
development:
  GMAIL_USERNAME: <a href="&#x6d;&#x61;&#105;&#108;&#116;&#111;&#58;&#116;&#101;&#x73;&#116;&#x64;&#x75;&#109;&#x6d;&#x79;&#64;&#103;&#x6d;&#x61;&#x69;&#108;&#x2e;&#x63;&#x6f;&#109;">&#116;&#101;&#115;&#x74;&#x64;&#x75;&#109;&#x6d;&#x79;&#x40;&#x67;&#109;&#x61;&#x69;&#x6c;&#x2e;&#99;&#111;&#x6d;</a>
  GMAIL_PASSWORD: password123456
production:
  GMAIL_USERNAME: <a href="&#x6d;&#x61;&#x69;&#x6c;&#116;&#x6f;&#x3a;&#115;&#117;&#112;&#x65;&#114;&#97;&#x77;&#x65;&#x73;&#111;&#109;&#101;&#x40;&#103;&#x6d;&#97;&#105;&#108;&#x2e;&#x63;&#x6f;&#x6d;">&#x73;&#x75;&#112;&#101;&#114;&#97;&#119;&#x65;&#x73;&#111;&#109;&#x65;&#x40;&#103;&#109;&#97;&#x69;&#x6c;&#46;&#99;&#x6f;&#x6d;</a>
  GMAIL_PASSWORD: W$aIk91@45<em>lkM
{% endcodeblock %}
</em>Note: The indentation is critical.*<br><br>
That is all.<br>
Figaro and Rails will know which environment you&rsquo;re in and use that particular
username and password.</p>

<h3>Setting up for Heroku</h3>


<p>Let&rsquo;s say that you are wanting to deploy your app through Heroku, but don&rsquo;t know
how the environment variables can be setup on the remote server.<br>
No fear!<br>
A simple command and figaro will take care of it for you.
{% codeblock Terminal lang:console <a href="https://github.com/laserlemon/figaro">https://github.com/laserlemon/figaro</a> %}
rake figaro:heroku
{% endcodeblock %}
BOOM.<br>
Your environment variables have been setup on Heroku.
If you wanted to confirm that they&rsquo;re setup all nice and tidy.
After deploying to heroku, <a href="https://devcenter.heroku.com/articles/config-vars">type in the command</a>.
{% codeblock Terminal lang:console <a href="https://github.com/laserlemon/figaro">https://github.com/laserlemon/figaro</a> %}
heroku config
{% endcodeblock %}</p>

<h3>Go Play!</h3>


<p>Now figaro has been installed on your Rails app, you can deploy easily to heroku,
and your information has not been compromised.
I&rsquo;d call that a pretty good day.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gem Choices]]></title>
    <link href="http://andrewhouse.github.io/blog/2014/08/13/gem-choices/"/>
    <updated>2014-08-13T16:37:02-04:00</updated>
    <id>http://andrewhouse.github.io/blog/2014/08/13/gem-choices</id>
    <content type="html"><![CDATA[<p>Gem&rsquo;s make my Rails world go round. <br>
However, there are so many gems around that it would take entirely too long
to comb through them all.
I do have a method that helps me select certain gems from others. <br>
<strong>Documentation.</strong><br>
If a gem is lacking in how-to&rsquo;s, tutorials, or efficient documentation-I
typically skip over it.
For example, one of my favorite gems is <a href="https://github.com/plataformatec/simple_form">Simple Form</a>.
Simple Form allows forms to be a little easier to read.
My favorite part about it?<br>
Look at all of that documenation on the Github page.<br>
I love it.
There have been situations where I use gems that don&rsquo;t have great documentation.
Typically that is when I&rsquo;m desperate for something and have exhausted my resources.
Odds are, the gem is a failure and I crawl into a little hole for a few minutes.
Alas, gems are great to use and their documentation/codebase allows for steady
knowledge and easy implementation.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pry-ing Apart Code]]></title>
    <link href="http://andrewhouse.github.io/blog/2014/08/05/pry-ing-apart-code/"/>
    <updated>2014-08-05T20:36:37-04:00</updated>
    <id>http://andrewhouse.github.io/blog/2014/08/05/pry-ing-apart-code</id>
    <content type="html"><![CDATA[<p>I like to think of writing code similar to designing puzzles.
The more simple the code, the easier to dissect each individual element and
know the code with exact precision.
However, I have a fondness for diving deep into code I don&rsquo;t understand.
One of my favorite things to do is to find a method on ruby-docs that I know
nothing about, and pick it apart piece by piece.
Originally, I used mass amounts of puts and tabbing back and forth between
my editor and irb. During my first day at the IronYard my Instructor James
introduced me to Pry. <br><br></p>

<!-- more -->


<p>Let me say, pry is a dream. <br><br>
Pry is pretty sweet because I&rsquo;m able to use pry in place of irb.
It also uses a colorized
text to help me instantly recognize what the type the presented code is.
For me, the most powerful feature of pry is <code>binding.pry</code>.
When I&rsquo;m wanting to find out what a particular piece of code is doing
at a specific point in time, I drop <code>binding.pry</code> at that specific
line. Then when I run the code, pry automatically opens and I&rsquo;m given the ability
to check specific states of code, even during complicated loops.
In addition, I like to use the pry-byebug gem to be able to go line by line,
continuously being able to check code and debug/figure out whats going on.<br><br>
As a Junior Dev I find these practices to be crucial.
There are plenty of times I have no idea what I&rsquo;m doing, and by calmly
dissecting the code, I can pull myself through even the hardest bits of code.</p>
]]></content>
  </entry>
  
</feed>
