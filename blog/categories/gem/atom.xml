<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Gem | House of Rails]]></title>
  <link href="http://andrewhouse.github.io/blog/categories/gem/atom.xml" rel="self"/>
  <link href="http://andrewhouse.github.io/"/>
  <updated>2014-08-14T08:46:59-04:00</updated>
  <id>http://andrewhouse.github.io/</id>
  <author>
    <name><![CDATA[Andrew House]]></name>
    <email><![CDATA[andrewhouse621@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Gem Choices]]></title>
    <link href="http://andrewhouse.github.io/blog/2014/08/13/gem-choices/"/>
    <updated>2014-08-13T16:37:02-04:00</updated>
    <id>http://andrewhouse.github.io/blog/2014/08/13/gem-choices</id>
    <content type="html"><![CDATA[<p>Gem&rsquo;s make my Rails world go round. <br>
However, there are so many gems around that it would take entirely too long
to comb through them all.
I do have a method that helps me select certain gems from others. <br>
<strong>Documentation.</strong><br>
If a gem is lacking in how-to&rsquo;s, tutorials, or efficient documentation-I
typically skip over it.
For example, one of my favorite gems is <a href="https://github.com/plataformatec/simple_form">Simple Form</a>.
Simple Form allows forms to be a little easier to read.
My favorite part about it?<br>
Look at all of that documenation on the Github page.<br>
I love it.
There have been situations where I use gems that don&rsquo;t have great documentation.
Typically that is when I&rsquo;m desperate for something and have exhausted my resources.
Odds are, the gem is a failure and I crawl into a little hole for a few minutes.
Alas, gems are great to use and their documentation/codebase allows for steady
knowledge and easy implementation.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pry-ing Apart Code]]></title>
    <link href="http://andrewhouse.github.io/blog/2014/08/05/pry-ing-apart-code/"/>
    <updated>2014-08-05T20:36:37-04:00</updated>
    <id>http://andrewhouse.github.io/blog/2014/08/05/pry-ing-apart-code</id>
    <content type="html"><![CDATA[<p>I like to think of writing code similar to designing puzzles.
The more simple the code, the easier to dissect each individual element and
know the code with exact precision.
However, I have a fondness for diving deep into code I don&rsquo;t understand.
One of my favorite things to do is to find a method on ruby-docs that I know
nothing about, and pick it apart piece by piece.
Originally, I used mass amounts of puts and tabbing back and forth between
my editor and irb. During my first day at the IronYard my Instructor James
introduced me to Pry. <br><br></p>

<!-- more -->


<p>Let me say, pry is a dream. <br><br>
Pry is pretty sweet because I&rsquo;m able to use pry in place of irb.
It also uses a colorized
text to help me instantly recognize what the type the presented code is.
For me, the most powerful feature of pry is <code>binding.pry</code>.
When I&rsquo;m wanting to find out what a particular piece of code is doing
at a specific point in time, I drop <code>binding.pry</code> at that specific
line. Then when I run the code, pry automatically opens and I&rsquo;m given the ability
to check specific states of code, even during complicated loops.
In addition, I like to use the pry-byebug gem to be able to go line by line,
continuously being able to check code and debug/figure out whats going on.<br><br>
As a Junior Dev I find these practices to be crucial.
There are plenty of times I have no idea what I&rsquo;m doing, and by calmly
dissecting the code, I can pull myself through even the hardest bits of code.</p>
]]></content>
  </entry>
  
</feed>
