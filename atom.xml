<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[House of Rails]]></title>
  <link href="http://andrewhouse.github.io/atom.xml" rel="self"/>
  <link href="http://andrewhouse.github.io/"/>
  <updated>2014-08-07T10:22:01-04:00</updated>
  <id>http://andrewhouse.github.io/</id>
  <author>
    <name><![CDATA[Andrew House]]></name>
    <email><![CDATA[andrewhouse621@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Being Object Oriented]]></title>
    <link href="http://andrewhouse.github.io/blog/2014/08/07/being-object-oriented/"/>
    <updated>2014-08-07T10:02:29-04:00</updated>
    <id>http://andrewhouse.github.io/blog/2014/08/07/being-object-oriented</id>
    <content type="html"><![CDATA[<p>I love designing classes in an Object Oriented fashion.
It gives a good feeling, like there aren&rsquo;t just a bunch of empty method.
Each method belongs to something larger, each piece makes the whole complete.
Object Oriented Programming (OOP) just makes sense to me.<!-- more --> <br><br>
I like to think of classes as factories.
Each factory pumps out a special part thats essential for the whole.
The combination of all of the parts produced by the factories make a larger
object.
Attacking problems this way helps me pre-debug(defensive coding) the situation.
Doing so makes it easier to debug, read, and understand.
<br><br>
Even when not specifically designing Object Oriented features, I still
think of designing projects like objects.
Let&rsquo;s say I&rsquo;m building a rails app.
At the top level there is the MVC(model, view, controller).
From there I break it down into pieces.
Each view has several HTML &amp; CSS files.
Each HTML can have partials, their own css stylings, etc.
I keep breaking every piece down and down to make every little bit easier to
understand.
To me, designing this way helps maintain my sanity and keep organized.<br></p>

<p>Objects are my friends, and designing in such a way isn&rsquo;t too hard of a task.
Just be mindful of the roles each object plays, name them accordingly, and
create the puzzle that holds all the pieces perfectly.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Motivation]]></title>
    <link href="http://andrewhouse.github.io/blog/2014/08/06/motivation/"/>
    <updated>2014-08-06T14:32:11-04:00</updated>
    <id>http://andrewhouse.github.io/blog/2014/08/06/motivation</id>
    <content type="html"><![CDATA[<p>Sometimes it is difficult to find the necessary drive to complete tasks.
That doesn&rsquo;t happen to me when I code.
When I get started with an idea or a project, I&rsquo;m fully immersed.
I like to think of it as a coding high.
When I&rsquo;m in the zone, writing remarkably precise and efficient code.
It&rsquo;s a wonderful and beautiful thing.<!-- more --><br></p>

<p>Coding gives me energy.
I find that by coding, I am able to find things that would seem otherwise mundane, fun.
The thrill of going beyond my limits and learning a new skill.
It just puts me in a good mood.<br></p>

<p>I find coding to be extraordinarily soothing.
There is nothing quite like being lost in a piece of code.
When the world falls silent and all that remains are my code and me.
It&rsquo;s a zen like moment, and I have come to appreciate it more and more.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Ruby Chose Me]]></title>
    <link href="http://andrewhouse.github.io/blog/2014/08/06/how-ruby-chose-me/"/>
    <updated>2014-08-06T08:49:11-04:00</updated>
    <id>http://andrewhouse.github.io/blog/2014/08/06/how-ruby-chose-me</id>
    <content type="html"><![CDATA[<p>Javascript was my first programming language.
While it was fun to use, it was also very syntax heavy.
The amount of ()&rsquo;s and {}&rsquo;s pretty much drove me insane.  <br>
After learning the basics of Javascript I started to look for other
languages that would be relevant to my goal of web development.
I had come to learn how Javascript was incredibly important making web
pages function, and I wanted to learn the skills to drive the essential
pieces that run in the background. That&rsquo;s right, I wanted to take a look
into the back-end. <br></p>

<!-- more -->


<p>After reasearching for countless days I finally stumbled upon Ruby on Rails.
It seemed that Rails was a great way to start looking into the backend.
However, the majority of places I saw said to absolutly not start Rails
until I was fluent in Ruby.
Then a lightbulb moment came.
I remember seeing a Ruby course when I was going over the Javascript codeacademy
course.
There I went, headfirst into Ruby without a clue of what it was.<br><br>
I thought Ruby was joking with me.
Hardly any ()&rsquo;s and only {}&rsquo;s with hashes and blocks. Are you serious?
It was fluid, less verbose, and object oriented.
I fell head over heels.
From that point on I focused mainly on Ruby and learning how to properly structure
methods, classes, and everything I could.
I&rsquo;ve got to the point to where just getting something to work the way I want to isn&rsquo;t
enought, I need to have it be in best practice.
Using proper standards and conventions adopted by professionals.
Ruby is a ton of fun.
I&rsquo;m incredibly passionate about it and it has made me a more passionate developer.<br><br>
Ruby pulled me into it&rsquo;s world and I couldn&rsquo;t be happier.
From there I went to learn basic Rails and make a few web apps of my own.
Currently, I am attending the IronYard in Atlanta, GA to learn more
advanced Ruby and Rails.
By the end of this I feel I will be absolutely be prepared to be a critical
asset to any team. <br><br>
I have Ruby to thank for all of it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pry Ing Apart Code]]></title>
    <link href="http://andrewhouse.github.io/blog/2014/08/05/pry-ing-apart-code/"/>
    <updated>2014-08-05T00:00:00-04:00</updated>
    <id>http://andrewhouse.github.io/blog/2014/08/05/pry-ing-apart-code</id>
    <content type="html"><![CDATA[<p>I like to think of writing code similar to designing puzzles.
The more simple the code, the easier to dissect each individual element and
know the code with exact precision.
However, I have a fondness for diving deep into code I don&rsquo;t understand.
One of my favorite things to do is to find a method on ruby-docs that I know
nothing about, and pick it apart piece by piece.
Originally, I used mass amounts of puts and tabbing back and forth between
my editor and irb. During my first day at the IronYard my Instructor James
introduced me to Pry. <br><br></p>

<!-- more -->


<p>Let me say, pry is a dream. <br><br>
Pry is pretty sweet because I&rsquo;m able to use pry in place of irb.
It also uses a colorized
text to help me instantly recognize what the type the presented code is.
For me, the most powerful feature of pry is <code>binding.pry</code>.
When I&rsquo;m wanting to find out what a particular piece of code is doing
at a specific point in time, I drop <code>binding.pry</code> at that specific
line. Then when I run the code, pry automatically opens and I&rsquo;m given the ability
to check specific states of code, even during complicated loops.
In addition, I like to use the pry-byebug gem to be able to go line by line,
continuously being able to check code and debug/figure out whats going on.<br><br>
As a Junior Dev I find these practices to be crucial.
There are plenty of times I have no idea what I&rsquo;m doing, and by calmly
dissecting the code, I can pull myself through even the hardest bits of code.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Git]]></title>
    <link href="http://andrewhouse.github.io/blog/2014/08/05/getting-git/"/>
    <updated>2014-08-05T00:00:00-04:00</updated>
    <id>http://andrewhouse.github.io/blog/2014/08/05/getting-git</id>
    <content type="html"><![CDATA[<p>Git is glorious. <br>
I once thought it was annoying, countless <code> git add . </code> followed by<br>
<code> git commit -m &ldquo;why am i doing this?&rdquo; </code> <br> <br>
My initial understanding of git was limited. I understood it was a VCM (Version
  Control Manager), but didn&rsquo;t really grasp how powerful it was to backup code. <br>
  <!-- more --></p>

<p>First, the difference between Git and GitHub. Git is what is used on your machine, it
is a tool to decide what files need to be added (staged) and commited (ready to be uploaded).
Then git connects to GitHub as a centralized place to store all of the files that are commited
and ready to be uploaded. <br>
<br> Boom, magic is born. <br><br>
It&rsquo;s a beautiful combination. To be able to look at your code from any machine, always
be able to clone down copies or look what you did last week and figure out why you did it.
When others are added to the equation is when using GitHub becomes a beast. Imagine it,
you&rsquo;re working on a project (hopefully a Rails project) and you&rsquo;ve just finished implementing
a new gem that you found. Your partner (who so happens to be the front end developer) knows
that you have been working on the gem, and that finishing would mean he would only need to make
a couple of tweeks to finish the project. Through github all that is needed is for you to add,
commit, and push your code while your parther pulls it down. <br>
BOOM<br>
If that&rsquo;s not magic idk what is. <br>
Once again, git is glorious. If you&rsquo;re starting out and are hesitant about using git,
just keep in mind that git will be your best friend. Especially when you
accidentally <code> rm -rf </code> (don&rsquo;t do this on files/folders if you don&rsquo;t know what it is)
a few files and you think the world is about to end (it happens).<br><br>
Look up tutorials, watch videos, and ask people who have been using it.
Getting git is an extremely powerful tool any developer can have, and I am very
glad that I took the time to understand its power.</p>
]]></content>
  </entry>
  
</feed>
