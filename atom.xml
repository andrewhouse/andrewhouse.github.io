<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[House of Rails]]></title>
  <link href="http://andrewhouse.github.io/atom.xml" rel="self"/>
  <link href="http://andrewhouse.github.io/"/>
  <updated>2014-08-27T09:04:04-04:00</updated>
  <id>http://andrewhouse.github.io/</id>
  <author>
    <name><![CDATA[Andrew House]]></name>
    <email><![CDATA[andrewhouse621@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Testing for Dummies]]></title>
    <link href="http://andrewhouse.github.io/blog/2014/08/27/testing-for-dummies/"/>
    <updated>2014-08-27T08:56:38-04:00</updated>
    <id>http://andrewhouse.github.io/blog/2014/08/27/testing-for-dummies</id>
    <content type="html"><![CDATA[<p>I suck at testing.<br>
There are some things that click, and some that don&rsquo;t.
For me, testing doesn&rsquo;t click.
I understand the benefit of it, helping getting my thoughts in order and
drive code in a structured way.
I don&rsquo;t know if its the specific DSL of using rspec, or what.
But I am not good at it (yet).<br><br>
Since testing is my achilles heel, I&rsquo;ve decided to make it my prerogative
to get it down.
I don&rsquo;t want to back away from a challenge just because I don&rsquo;t get it at first.
It&rsquo;s completely okay that I&rsquo;m not good at testing right now.
The reason I&rsquo;m at The Iron Yard is because I don&rsquo;t have all the skills required
to be a proficient Junior Rails Developer at my current level.
That&rsquo;s why I&rsquo;m going to use the time that I have here to master any skills
that I&rsquo;m not good at.
Testing is currently at the top of my list.
Once I get it down (and I will get it down) I&rsquo;ll move on to the next beast.
Keep knocking them down one after another until I feel confident doing what I&rsquo;m doing.
Then when I&rsquo;m confident, look at some amazing code that I don&rsquo;t understand
and begin the journey again.
Learning is an ongoing process and it&rsquo;s something that is needed by a
web engineer.
To be able to continuously challenge myself and push into the next technology.
Adapting, evolving, and challenging.
Three things that I love to do and will continue to do for as long as I can.<br>
Coding is fun.
Always changing and never perfect.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Forge Hackathon]]></title>
    <link href="http://andrewhouse.github.io/blog/2014/08/25/forge-hackathon/"/>
    <updated>2014-08-25T10:27:33-04:00</updated>
    <id>http://andrewhouse.github.io/blog/2014/08/25/forge-hackathon</id>
    <content type="html"><![CDATA[<p>I was a mentor at my first hackathon.<br>
Weird right?
The Iron Yard was a sponsor at the <a href="http://forgeatl.com/">Forge Hackathon</a> in Atlanta,
and they asked their students if some of them would like to be mentors.
I thought it would be a great experience to see what a hackathon&rsquo;s atmosphere
is like, and talk to people and see what they&rsquo;re thinking.
So I roll in Saturday morning and sit in a room just for software development.
My role as a mentor was to sit and wait for people to ask for help.
After about 5 minutes of sitting, I was approached by a team looking for help.<br><br>
Their idea was that they were developing a wearable band that doctors were
able to update their personal data.
Such as basic information (name, birthday, etc) and more elaborate data such
as diseases, medication, etc.
The problem they had was that their target locations only had internet once every
few months and didn&rsquo;t know how to store their data locally.
I recommended storing basic data on the wristband (before they were only trying
to store the data on a server with a wristband having only an id).
This way, when the doctor has internet they can push their data up to the server,
allowing the internet copy to be up to date.
The copy on the wristband would be as current as the doctor&rsquo;s version is.
So if they were to move and go to a different doctor, that doctor would
have the most up to date version that their previous doctor had.<br>
Then afterwards I explained strategies to span out their data model into
separate categories to help future expansion and allow for easier transitions
of adding data.
For example, <br>
instead of having a single User table, break medication, doctors, &amp; diseases
into a separate table so that adding and removing data would be much more
efficient. <br><br>
All in all, they seemed to really enjoy my feedback (actually, I asked if
I was helpful and they said I was a huge help).
My first hackathon experience was pretty awesome, it helped my resolve in
believing in myself and trusting the knowledge I have to help others.
It&rsquo;s a spectacular feeling.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Front End Demo Day]]></title>
    <link href="http://andrewhouse.github.io/blog/2014/08/22/front-end-demo-day/"/>
    <updated>2014-08-22T21:06:36-04:00</updated>
    <id>http://andrewhouse.github.io/blog/2014/08/22/front-end-demo-day</id>
    <content type="html"><![CDATA[<p>Today the Front End course for The Iron Yard students in Atlanta showed their
final projects.<br>
I thought it was a very interesting experience.
There were probably around 50-60 people attending, some Iron Yard affiliated, and
some potential employers.
And everyone was there to see the final projects for a few individuals.
It kind of got my blood pumping.
In just two short months I will be up on the stage showing off whatever
project it is that I do.
Our class (Ruby on Rails) will be giving their presentations at the same time
as the IOS class.
Which means my project needs to be twice as amazing as everyone elses.
The pressure is on, the timer has started.
There will be a ton of code cranked out in a few months.
Now I just have to figure out what in the hell I&rsquo;m going to do.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning by Doing]]></title>
    <link href="http://andrewhouse.github.io/blog/2014/08/21/learning-by-doing/"/>
    <updated>2014-08-21T09:02:02-04:00</updated>
    <id>http://andrewhouse.github.io/blog/2014/08/21/learning-by-doing</id>
    <content type="html"><![CDATA[<p>I have a problem when it comes to learning new skills/languages.<br>
I am very theoretical minded person in a sense that I could read and watch
videos about anything and be content.
However, I have found that knowledge doesn&rsquo;t stick as well with me if I don&rsquo;t
implement what I have learned.<br><br>
Example:<br>
I&rsquo;m in the process of learning <a href="http://iamandrewhouse.com/blog/2014/08/19/starting-angular-js/">Angular Js</a>
and a few months ago I did the Code School course.
When going over the course again, I noticed that I remembered a lot of theory.
Things like, I&rsquo;m able to make controllers in a separate JS file and integrate
them into the HTML directly. Little detailed parts of a whole I remembered, but
when it came to actual implementation I had forgotten the majority of it.
That allowed me to catch up fairly quickly on what I was doing, I felt
when I was learning it again a kind of snowball effect.
Where everything felt strange at first, but the more I did the quicker it
came back to me.
However, I don&rsquo;t want to fall that far back again.
So this time I&rsquo;m going to try a much different strategy.<br><br></p>

<!-- more -->


<p>I&rsquo;ve decided on the majority of the Rails apps that I am going to be building
in my upcoming weeks at The Iron Yard, that I would try to integrate Angular JS
into my front end if just a little bit.
Constantly reminding myself of what it is, how to use it, and how to use its
incredibly responsive design to the optimal efficiency.
I feel like I need to retain what I am learning by keeping on using it.
It seems pretty basic, but it will be effort to constantly be using it and
integrating it into my designs.
Eventually I feel like I will be comfortable enough to not be integrating
Angular JS into Rails, but develop API&rsquo;s with Rails and have Angular call
the JSON data returned and have two separate entities.
This is where I want to be and what I want to develop. <br><br>
I feel strongly about taking my Rails applications towards an API path.
To me, this is where the power of Rails really comes in.
To be able to quickly and efficiently build an API and let multiple
mediums use the data that I create.
One of the other classes at The Iron Yard is an IOS class.
Here in the upcoming weeks we are going to be doing an internal Hackathon,
being able for all of us to use our skills together.
I want to be able to make an API that is usable by IOS, front-end, etc etc.
This excites me greatly.
I have a path and I&rsquo;m looking forward to walking it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Starting Angular JS]]></title>
    <link href="http://andrewhouse.github.io/blog/2014/08/19/starting-angular-js/"/>
    <updated>2014-08-19T08:41:45-04:00</updated>
    <id>http://andrewhouse.github.io/blog/2014/08/19/starting-angular-js</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve decided to be full stack would be fun. <br>
I&rsquo;m starting to progress nicely in implementing rails features, and my instructor
James suggested that I take an interest in learning and implementing a
front end client.
I had taken the <a href="https://www.codeschool.com/courses/shaping-up-with-angular-js">Code School Course</a>
on starting Angular JS and I liked it&rsquo;s flow.
The framework seemed less verbose than Backbone JS, although it&rsquo;s entire syntax
structure is odd at first.
I like the way it read on an html page.
I know that sounds weird with all of the controller&rsquo;s and directives, but I dig it.<br><br>
Since I took this course a few months ago, I&rsquo;m going to go through it again to
freshen up on the basics.
After that I&rsquo;m going to go through the <a href="https://docs.angularjs.org/tutorial/">Tutorial</a>
on the Angular JS Documentation.
Once I get a good feeling of the flow of Angular, I&rsquo;m probably going to try and
implement it into my <a href="http://tiy-homework.herokuapp.com">The Iron Yard Homework App</a>.
I know it will be a long road to get a feeling of the flow of Angular JS, but I
feel like in the end, it will be a valuable skill to have.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Homework App]]></title>
    <link href="http://andrewhouse.github.io/blog/2014/08/18/homework-app/"/>
    <updated>2014-08-18T15:40:16-04:00</updated>
    <id>http://andrewhouse.github.io/blog/2014/08/18/homework-app</id>
    <content type="html"><![CDATA[<p>I built an app which some of my fellow students can use as a medium to give
progress on their homework assignments.<br>
<a href="http://tiy-homework.herokuapp.com">My App</a> uses Devise for registering users,
Heroku as the means for depoloyment, and a vast array of fun gems.
The whole point of the app is that there is a central place where our teacher
(James Dabbs) can check our homework progress.
James is the only authorized user (admin) capable of making new assignments.
Then each student can update the status of their homework by selecting a created
assignment, post the link of their website, and check to see if the assignment
has been completed.<br><br>
I think it works pretty well, all of the CSS was done with the help of
<a href="http://getbootstrap.com/">Twitter Bootstrap</a>. If you are interested in
checking out my code, I have it posted on <a href="https://github.com/andrewhouse/TIY-Homework-Checker">Github</a>.
<br>
But yea, making apps are fun. I had a lot of challenges in this app.
Something different I did in this that I had never done before was implementing
a has_many_through relationship.
It required me to do quite a bit of reading to see how each piece interacted,
but in the end it was totally worth it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Figaro]]></title>
    <link href="http://andrewhouse.github.io/blog/2014/08/14/figaro/"/>
    <updated>2014-08-14T10:12:31-04:00</updated>
    <id>http://andrewhouse.github.io/blog/2014/08/14/figaro</id>
    <content type="html"><![CDATA[<p>Once upon a time when I didn&rsquo;t know what I was doing.<br>
I was trying to setup a rails app for my wife and have her family upload
images and a birthday message.
After some research, I decided to use Amazon Web Services to host my images.
I got it configured in my rails app with Paperclip and that is when I made
a fatal, fatal, fatal error.<br><br>
I put in my bucketname and password directly into my code.<br><br>
The following morning, I received a call from Amazon.
Confirming whether I had setup 5 instances across the world racking up $250
overnight.<br>
I freaked out a little.<br>
After getting that resolved, I searched for how I can avoid making that
stupid mistake again.
My research turned up a gem called <strong>Figaro</strong>.<br>
<a href="https://github.com/laserlemon/figaro">Figaro</a> is used to hide confidential information.
Usernames, passwords, you name it and it will store the variables in a file
that will be automatically ignored from git and can easily be configured
for <a href="http://heroku.com">Heroku</a>. <br></p>

<h3>Getting Started</h3>


<p>As always, you want to start by adding Figaro to your Gemfile.</p>

<figure class='code'><figcaption><span>Gemfile</span><a href='https://github.com/laserlemon/figaro'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;figaro&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<!-- more -->


<p><em>Note: Always run bundle after changing your gemfile</em><br><br>
Next we will bundle our gems for use.</p>

<figure class='code'><figcaption><span>Terminal</span><a href='https://github.com/laserlemon/figaro'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">bundle</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Note: bundle is shorthand for bundle install.</em><br></p>

<h3>Generating and Using Figaro Logic</h3>


<p>The Figaro gem comes with a generator that will have rails install the
<em>&lsquo;./config/application.yml&rsquo;</em> file, and add it to the git ignore list.</p>

<figure class='code'><figcaption><span>Terminal</span><a href='https://github.com/laserlemon/figaro'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">rails g figaro:install</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Note: g is short for generate.</em><br><br>
Now it&rsquo;s time for the magic.<br>
Open up <em>&lsquo;./config/application.yml&rsquo;</em>.
I&rsquo;ll be assuming that you are trying to setup a mailer and need your Gmail
username and password.</p>

<figure class='code'><figcaption><span>config/application.yml</span><a href='https://github.com/laserlemon/figaro'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">GMAIL_USERNAME</span><span class="p">:</span> <span class="n">testdummy</span><span class="vi">@gmail</span><span class="o">.</span><span class="n">com</span>
</span><span class='line'><span class="ss">GMAIL_PASSWORD</span><span class="p">:</span> <span class="n">password123456</span>
</span></code></pre></td></tr></table></div></figure>


<p>These files are now able to be accessed via
<a href="http://www.ruby-doc.org/core-2.1.2/ENV.html">Environment Variables</a>.
Environment variables can be called in any of your rails files.
Normally, you can access Environment Variables one way.</p>

<figure class='code'><figcaption><span>Ruby Code</span><a href='https://github.com/laserlemon/figaro'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">ENV</span><span class="o">[</span><span class="s2">&quot;GMAIL_USERNAME&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Note: All Caps are critical.</em><br><br>
This will render <em>testdummy@gmail.com</em> wherever the environment variable is
envoked.
A way of calling environment variables through Figaro is to use their syntax.</p>

<figure class='code'><figcaption><span>Ruby Code</span><a href='https://github.com/laserlemon/figaro'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Figaro</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">gmail_username</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now instead of caps, brackets, and quotations; it is a simple method call.</p>

<h3>Multiple Environments</h3>


<p>Figaro allows the use of different variables in different environments.
For example, in the Gmail example; let&rsquo;s say you want to have a test email
address for development, but a special email account for production emails.
For figaro it&rsquo;s a simple setup.</p>

<figure class='code'><figcaption><span>config/application.yml</span><a href='https://github.com/laserlemon/figaro'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">development</span><span class="p">:</span>
</span><span class='line'>  <span class="ss">GMAIL_USERNAME</span><span class="p">:</span> <span class="n">testdummy</span><span class="vi">@gmail</span><span class="o">.</span><span class="n">com</span>
</span><span class='line'>  <span class="ss">GMAIL_PASSWORD</span><span class="p">:</span> <span class="n">password123456</span>
</span><span class='line'><span class="ss">production</span><span class="p">:</span>
</span><span class='line'>  <span class="ss">GMAIL_USERNAME</span><span class="p">:</span> <span class="n">superawesome</span><span class="vi">@gmail</span><span class="o">.</span><span class="n">com</span>
</span><span class='line'>  <span class="ss">GMAIL_PASSWORD</span><span class="p">:</span> <span class="n">W</span><span class="vg">$aIk91</span><span class="err">@</span><span class="mi">45</span><span class="o">*</span><span class="n">lkM</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Note: The indentation is critical.</em><br><br>
That is all.<br>
Figaro and Rails will know which environment you&rsquo;re in and use that particular
username and password.</p>

<h3>Setting up for Heroku</h3>


<p>Let&rsquo;s say that you are wanting to deploy your app through Heroku, but don&rsquo;t know
how the environment variables can be setup on the remote server.<br>
No fear!<br>
A simple command and figaro will take care of it for you.</p>

<figure class='code'><figcaption><span>Terminal</span><a href='https://github.com/laserlemon/figaro'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">rake figaro:heroku</span>
</span></code></pre></td></tr></table></div></figure>


<p>BOOM.<br>
Your environment variables have been setup on Heroku.
If you wanted to confirm that they&rsquo;re setup all nice and tidy.
After deploying to heroku, <a href="https://devcenter.heroku.com/articles/config-vars">type in the command</a>.</p>

<figure class='code'><figcaption><span>Terminal</span><a href='https://github.com/laserlemon/figaro'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">heroku config</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Go Play!</h3>


<p>Now figaro has been installed on your Rails app, you can deploy easily to heroku,
and your information has not been compromised.
I&rsquo;d call that a pretty good day.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Twitter Bootstrap Rails]]></title>
    <link href="http://andrewhouse.github.io/blog/2014/08/13/twitter-bootstrap-rails/"/>
    <updated>2014-08-13T17:38:02-04:00</updated>
    <id>http://andrewhouse.github.io/blog/2014/08/13/twitter-bootstrap-rails</id>
    <content type="html"><![CDATA[<p>Being entirely void of creativity, the <a href="https://github.com/seyhunak/twitter-bootstrap-rails">Twitter Bootstrap Rails Gem</a>
is amazing.<br>
I use Twitter Bootstrap(bootstrap for short) to generate basic layouts so I
can get a handle on how things can possibly look.
Not to mention, it gives an amazing starting point for building good looking css.
If you visit the <a href="http://getbootstrap.com/components/">Twitter Bootstrap Home Page</a>,
you can see all of the styles you can create.
If you are a beginniner, ignore anything and everything Javascript related.
Stick primarily to the CSS and Components page and customize your page with
their features.
A little pizzazz goes a long way ya&#8217; know. <br></p>

<h3>Getting Started</h3>


<p>I am assuming that you have a new rails project and are looking to add bootstrap
to that project.<br><br>
Let&rsquo;s start by adding the &lsquo;twitter-bootstrap-rails&rsquo; gem to the Gemfile.</p>

<figure class='code'><figcaption><span>Gemfile</span><a href='https://github.com/seyhunak/twitter-bootstrap-rails'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;twitter-bootstrap-rails&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<!-- more -->


<p><strong>ALWAYS</strong> After you update your Gemfile in any way, run bundler.
Now open up your terminal/iTerm/command prompt.
The rest of generating default bootstrap logic will be done from the terminal.</p>

<figure class='code'><figcaption><span>Terminal</span><a href='https://github.com/seyhunak/twitter-bootstrap-rails'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bundle install
</span></code></pre></td></tr></table></div></figure>


<p><em>Note: bundle is shorthand for bundle install.</em><br><br>
Next, we need to generate the bootstrap into our Rails app.</p>

<figure class='code'><figcaption><span>Terminal</span><a href='https://github.com/seyhunak/twitter-bootstrap-rails'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rails generate bootstrap:install static
</span></code></pre></td></tr></table></div></figure>


<p><em>Note: g is shorthand for generate when Rails is the context.</em></p>

<h3>Generating the Default Layout Page</h3>


<p>Now bootstrap has been installed into your Rails app and you can access bootstrap
logic if you want to completely customize your page.
However, bootstrap can help generate default layouts for your application.html page and
the generated views.<br>
In order to generate a default layout page, you need to run the following.</p>

<figure class='code'><figcaption><span>Terminal</span><a href='https://github.com/seyhunak/twitter-bootstrap-rails'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rails g bootstrap:layout application fluid -f
</span></code></pre></td></tr></table></div></figure>


<p><em>Note: You can run the code without the -f flag. All the flag will do is force the changes
so you don&rsquo;t have to repeatedly say yes to every little thing.</em><br><br>
<em>Note: If you have installed haml or slim and your application file uses those tags,
then bootstrap will install the layout in that format. Cool right?</em><br><br>
Now if you look at your application.html.erb(if you&rsquo;re using erb) you will notice
the drastic change to the html. Don&rsquo;t be afraid of all of the head logic.
Most of it is for mobile and meta data.
If you wanted to go ahead and customize your layout page, you can use
the css or components on the <a href="http://getbootstrap.com/components/">Twitter Bootstrap Page</a>.
If there are other types of bootstrap that you want to change.
For example, you hate the color of when you hover over your title on the navbar.
To make changes directly to the css go to <em>&lsquo;./app/assets/stylesheets/bootstrap_and_overrides.css&rsquo;</em>
and make your customizations there.<br></p>

<h3>Simple Form</h3>


<p>If you are using <a href="https://github.com/plataformatec/simple_form">Simple Form</a>,
there is a bootstrap generator for simple form. If you are thinking about
using simple form, do so <strong>before</strong> installing the default views. If not,
the view forms will be installed in the default form format.</p>

<figure class='code'><figcaption><span>Gemfile</span><a href='https://github.com/plataformatec/simple_form'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;simple_form&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Note: Remember to bundle after changing the Gemfile.</em><br></p>

<figure class='code'><figcaption><span>Terminal</span><a href='https://github.com/seyhunak/twitter-bootstrap-rails'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bundle
</span><span class='line'>rails g simple_form:install --bootstrap
</span></code></pre></td></tr></table></div></figure>


<h3>Generating Default Views</h3>


<p>The synax for changing the layout of a set of views are.</p>

<figure class='code'><figcaption><span>Terminal</span><a href='https://github.com/seyhunak/twitter-bootstrap-rails'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rails g bootstrap:themed <span class="o">[</span>RESOURCE_NAME<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Resource name is the name of the <em>controller</em> of which you would like the views
changed. Let&rsquo;s say that you want to make a Posts controller.</p>

<figure class='code'><figcaption><span>Terminal</span><a href='https://github.com/seyhunak/twitter-bootstrap-rails'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rails g scaffold post title:string content:text
</span><span class='line'>rake db:migrate
</span><span class='line'>rails g bootstrap:themed posts -f
</span></code></pre></td></tr></table></div></figure>


<p><em>Note: The pluralization is critical.</em><br><br>
<em>Note: Once again, the -f flag is just for saving precious time, it&rsquo;s not necessary.</em><br><br>
Now if you look at the views under <em>&lsquo;./app/views/posts&rsquo;</em> the index and show will now be
in table format. The new and edit views will render the form page.
The form will have a great starting layout. <br></p>

<h3>Now the fun begins!</h3>


<p>This is the true starting point for customizing your page however you want.
The basics have been done, now you don&rsquo;t have an ugly beginning point.
Once again, reference the <a href="http://getbootstrap.com/components/">Twitter Bootstrap Page</a>
and make every little detail your own.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gem Choices]]></title>
    <link href="http://andrewhouse.github.io/blog/2014/08/13/gem-choices/"/>
    <updated>2014-08-13T16:37:02-04:00</updated>
    <id>http://andrewhouse.github.io/blog/2014/08/13/gem-choices</id>
    <content type="html"><![CDATA[<p>Gem&rsquo;s make my Rails world go round. <br>
However, there are so many gems around that it would take entirely too long
to comb through them all.
I do have a method that helps me select certain gems from others. <br>
<strong>Documentation.</strong><br>
If a gem is lacking in how-to&rsquo;s, tutorials, or efficient documentation-I
typically skip over it.
For example, one of my favorite gems is <a href="https://github.com/plataformatec/simple_form">Simple Form</a>.
Simple Form allows forms to be a little easier to read.
My favorite part about it?<br>
Look at all of that documenation on the Github page.<br>
I love it.
There have been situations where I use gems that don&rsquo;t have great documentation.
Typically that is when I&rsquo;m desperate for something and have exhausted my resources.
Odds are, the gem is a failure and I crawl into a little hole for a few minutes.
Alas, gems are great to use and their documentation/codebase allows for steady
knowledge and easy implementation.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sinatra Is Fun]]></title>
    <link href="http://andrewhouse.github.io/blog/2014/08/11/sinatra-is-fun/"/>
    <updated>2014-08-11T21:09:49-04:00</updated>
    <id>http://andrewhouse.github.io/blog/2014/08/11/sinatra-is-fun</id>
    <content type="html"><![CDATA[<p>I never really gave Sinatra a chance. <br>
After reading articles after articles about how much better Rails is than
Sinatra, I kind of swept it under the rug.
I was sooooo wrong. <br>
Sinatra is crazy light weight.
Not as many bells, whistles, and not near as many headaches that come with Rails.
It&rsquo;s simplistic, and I like that.
Today I built <a href="http://andrew-sinatra.herokuapp.com/" title="Andrew House - Sinatra">a fun Sinatra app</a>
and I had a really great time.
I didn&rsquo;t try to make it too complicated, just trying to get used to haml and
getting into the groove of how sinatra should feel.<br><br>
I enjoyed how some of the magic that you take for granted in Rails is peeled
apart in Sinatra.
Making my own get/post requests and assigning routes was fun.
I may be overplaying it, and I know how beneficial rails will be when I take
on a larger app. But I have to say that now I will turn to sinatra for low
level simplistic apps. Kudos to James for making us play with Sinatra.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Starting Over]]></title>
    <link href="http://andrewhouse.github.io/blog/2014/08/08/starting-over/"/>
    <updated>2014-08-08T23:37:13-04:00</updated>
    <id>http://andrewhouse.github.io/blog/2014/08/08/starting-over</id>
    <content type="html"><![CDATA[<p>I LOVE to play around with new features. <br>
Tonight I was playing around with omniauth-github and trying to log in via rails.
I was able to log in (horray!), but I had forgotten what I was supposed to be
doing initially.
It happens to me every now and then; I get feature focused. <br><br>
I&rsquo;m so focused on getting this one little thing to work I lose track of
my goal. It&rsquo;s times like this, when I&rsquo;m barely into the project, and I was
able to get my feature to work.
I find that it&rsquo;s best to scrap it and start over.
My reasoning?<br>
  <li>Start on a path where I am able to remain focused.
  <li>When it is time to create the feature again; I will do it again from scratch,
forcing myself to learn.
  <li>In future projects, I will know to be well prepared and focused from the get go.
<br><br>
Long story short. <br>
I played around with a cool thing, got it to work, messed up, started over, and
didn&rsquo;t loose any passion.
Not a bad thing if you ask me.
I&rsquo;ll learn, grow, and do a better job next time.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Designing a Website]]></title>
    <link href="http://andrewhouse.github.io/blog/2014/08/08/designing-a-website/"/>
    <updated>2014-08-08T17:13:05-04:00</updated>
    <id>http://andrewhouse.github.io/blog/2014/08/08/designing-a-website</id>
    <content type="html"><![CDATA[<p>An eye for art I do not have. <br>
I can&rsquo;t paint, draw, sculpt or any of the like.
When it comes to making things look good, I have to say that I am a numskull.
However, I think designing a website is incredibly challenging and somehow fun.
I&rsquo;m not very fluent in css.
I can read it just fine, but when it comes to creating my own css from my own ideas,
I find it hard.
I tend to use tools like Twitter Bootstrap, ones that can give a default layout
and style without me having to give it much thought.
After a talk today with Sam Kapila, I felt a little at ease when thinking about
web design.
<br><br>
It&rsquo;s all about the User Experience. <br>
Making the person who is going to read my page to feel comfortable.
Not having to search for what they need, making it very clear, and using tools/tricks
to have a much easier reading experience.
For example, something as simple as not having the lines of text too close together.
I typically don&rsquo;t think about things like that.
I have a very backend oriented brain.
I just needed to use my perspective to design. <br>
Then I had a lightbulb moment.<br>
Pay attention to certain details on websites that annoy me and don&rsquo;t do that(also the opposite).
It&rsquo;s simple.
Do I hate that color? DON&rsquo;T DO IT. Do I like the way that navigation is laid out?
Inspect that element and see what they did.
I believe I&rsquo;m making designing harder than it is.
I just have to KISS (Keep It Simple Stupid) it a little.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[It's Electric]]></title>
    <link href="http://andrewhouse.github.io/blog/2014/08/07/its-electric/"/>
    <updated>2014-08-07T20:41:05-04:00</updated>
    <id>http://andrewhouse.github.io/blog/2014/08/07/its-electric</id>
    <content type="html"><![CDATA[<p>Electricity sure is annoying.<br>
I end up using it most of the day.
Whether it be by charging my laptop, heating up dinner, or watching tv.
Electricity encompasses my life.<br>
I&rsquo;m not saying I don&rsquo;t particularly like it, I just hate being dependent on
factors I can&rsquo;t control.
Currently the power is out at my apartment and I find it incredibly frustrating.
The thought of how we will use power in the future gives me great joy.
Affordable personal solar panels that are easy to diagnose? Yes please.
I&rsquo;d even take a Soylent Green-esque treadmill that could power my apartment.<br><br>
I know that I&rsquo;m overly dependent on electricity; my profession pretty much relies on it.
If something happened and we went back to the stone age, I would be royally screwed.
I do enjoy the era I was born into, and I look forward to the future and what
humanity will come up with to fill the void for everyone.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Being Object Oriented]]></title>
    <link href="http://andrewhouse.github.io/blog/2014/08/07/being-object-oriented/"/>
    <updated>2014-08-07T10:02:29-04:00</updated>
    <id>http://andrewhouse.github.io/blog/2014/08/07/being-object-oriented</id>
    <content type="html"><![CDATA[<p>I love designing classes in an Object Oriented fashion.
It gives a good feeling, like there aren&rsquo;t just a bunch of empty method.
Each method belongs to something larger, each piece makes the whole complete.
Object Oriented Programming (OOP) just makes sense to me.<!-- more --> <br><br>
I like to think of classes as factories.
Each factory pumps out a special part thats essential for the whole.
The combination of all of the parts produced by the factories make a larger
object.
Attacking problems this way helps me pre-debug(defensive coding) the situation.
Doing so makes it easier to debug, read, and understand.
<br><br>
Even when not specifically designing Object Oriented features, I still
think of designing projects like objects.
Let&rsquo;s say I&rsquo;m building a rails app.
At the top level there is the MVC(model, view, controller).
From there I break it down into pieces.
Each view has several HTML &amp; CSS files.
Each HTML can have partials, their own css stylings, etc.
I keep breaking every piece down and down to make every little bit easier to
understand.
To me, designing this way helps maintain my sanity and keep organized.<br></p>

<p>Objects are my friends, and designing in such a way isn&rsquo;t too hard of a task.
Just be mindful of the roles each object plays, name them accordingly, and
create the puzzle that holds all the pieces perfectly.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Motivation]]></title>
    <link href="http://andrewhouse.github.io/blog/2014/08/06/motivation/"/>
    <updated>2014-08-06T14:32:11-04:00</updated>
    <id>http://andrewhouse.github.io/blog/2014/08/06/motivation</id>
    <content type="html"><![CDATA[<p>Sometimes it is difficult to find the necessary drive to complete tasks.
That doesn&rsquo;t happen to me when I code.
When I get started with an idea or a project, I&rsquo;m fully immersed.
I like to think of it as a coding high.
When I&rsquo;m in the zone, writing remarkably precise and efficient code.
It&rsquo;s a wonderful and beautiful thing.<!-- more --><br></p>

<p>Coding gives me energy.
I find that by coding, I am able to find things that would seem otherwise mundane, fun.
The thrill of going beyond my limits and learning a new skill.
It just puts me in a good mood.<br></p>

<p>I find coding to be extraordinarily soothing.
There is nothing quite like being lost in a piece of code.
When the world falls silent and all that remains are my code and me.
It&rsquo;s a zen like moment, and I have come to appreciate it more and more.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Ruby Chose Me]]></title>
    <link href="http://andrewhouse.github.io/blog/2014/08/06/how-ruby-chose-me/"/>
    <updated>2014-08-06T08:49:11-04:00</updated>
    <id>http://andrewhouse.github.io/blog/2014/08/06/how-ruby-chose-me</id>
    <content type="html"><![CDATA[<p>Javascript was my first programming language.
While it was fun to use, it was also very syntax heavy.
The amount of ()&rsquo;s and {}&rsquo;s pretty much drove me insane.  <br>
After learning the basics of Javascript I started to look for other
languages that would be relevant to my goal of web development.
I had come to learn how Javascript was incredibly important making web
pages function, and I wanted to learn the skills to drive the essential
pieces that run in the background. That&rsquo;s right, I wanted to take a look
into the back-end. <br></p>

<!-- more -->


<p>After researching for countless days I finally stumbled upon Ruby on Rails.
It seemed that Rails was a great way to start looking into the backend.
However, the majority of places I saw said to absolutly not start Rails
until I was fluent in Ruby.
Then a lightbulb moment came.
I remember seeing a Ruby course when I was going over the Javascript codeacademy
course.
There I went, headfirst into Ruby without a clue of what it was.<br><br>
I thought Ruby was joking with me.
Hardly any ()&rsquo;s and only {}&rsquo;s with hashes and blocks. Are you serious?
It was fluid, less verbose, and object oriented.
I fell head over heels.
From that point on I focused mainly on Ruby and learning how to properly structure
methods, classes, and everything I could.
I&rsquo;ve got to the point to where just getting something to work the way I want to isn&rsquo;t
enought, I need to have it be in best practice.
Using proper standards and conventions adopted by professionals.
Ruby is a ton of fun.
I&rsquo;m incredibly passionate about it and it has made me a more passionate developer.<br><br>
Ruby pulled me into it&rsquo;s world and I couldn&rsquo;t be happier.
From there I went to learn basic Rails and make a few web apps of my own.
Currently, I am attending the IronYard in Atlanta, GA to learn more
advanced Ruby and Rails.
By the end of this I feel I will be absolutely be prepared to be a critical
asset to any team. <br><br>
I have Ruby to thank for all of it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pry-ing Apart Code]]></title>
    <link href="http://andrewhouse.github.io/blog/2014/08/05/pry-ing-apart-code/"/>
    <updated>2014-08-05T20:36:37-04:00</updated>
    <id>http://andrewhouse.github.io/blog/2014/08/05/pry-ing-apart-code</id>
    <content type="html"><![CDATA[<p>I like to think of writing code similar to designing puzzles.
The more simple the code, the easier to dissect each individual element and
know the code with exact precision.
However, I have a fondness for diving deep into code I don&rsquo;t understand.
One of my favorite things to do is to find a method on ruby-docs that I know
nothing about, and pick it apart piece by piece.
Originally, I used mass amounts of puts and tabbing back and forth between
my editor and irb. During my first day at the IronYard my Instructor James
introduced me to Pry. <br><br></p>

<!-- more -->


<p>Let me say, pry is a dream. <br><br>
Pry is pretty sweet because I&rsquo;m able to use pry in place of irb.
It also uses a colorized
text to help me instantly recognize what the type the presented code is.
For me, the most powerful feature of pry is <code>binding.pry</code>.
When I&rsquo;m wanting to find out what a particular piece of code is doing
at a specific point in time, I drop <code>binding.pry</code> at that specific
line. Then when I run the code, pry automatically opens and I&rsquo;m given the ability
to check specific states of code, even during complicated loops.
In addition, I like to use the pry-byebug gem to be able to go line by line,
continuously being able to check code and debug/figure out whats going on.<br><br>
As a Junior Dev I find these practices to be crucial.
There are plenty of times I have no idea what I&rsquo;m doing, and by calmly
dissecting the code, I can pull myself through even the hardest bits of code.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Git]]></title>
    <link href="http://andrewhouse.github.io/blog/2014/08/05/getting-git/"/>
    <updated>2014-08-05T11:35:53-04:00</updated>
    <id>http://andrewhouse.github.io/blog/2014/08/05/getting-git</id>
    <content type="html"><![CDATA[<p>Git is glorious. <br>
I once thought it was annoying, countless <code> git add . </code> followed by<br>
<code> git commit -m &ldquo;why am i doing this?&rdquo; </code> <br> <br>
My initial understanding of git was limited. I understood it was a VCM (Version
  Control Manager), but didn&rsquo;t really grasp how powerful it was to backup code. <br>
  <!-- more --></p>

<p>First, the difference between Git and GitHub. Git is what is used on your machine, it
is a tool to decide what files need to be added (staged) and commited (ready to be uploaded).
Then git connects to GitHub as a centralized place to store all of the files that are commited
and ready to be uploaded. <br>
<br> Boom, magic is born. <br><br>
It&rsquo;s a beautiful combination. To be able to look at your code from any machine, always
be able to clone down copies or look what you did last week and figure out why you did it.
When others are added to the equation is when using GitHub becomes a beast. Imagine it,
you&rsquo;re working on a project (hopefully a Rails project) and you&rsquo;ve just finished implementing
a new gem that you found. Your partner (who so happens to be the front end developer) knows
that you have been working on the gem, and that finishing would mean he would only need to make
a couple of tweeks to finish the project. Through github all that is needed is for you to add,
commit, and push your code while your parther pulls it down. <br>
BOOM<br>
If that&rsquo;s not magic idk what is. <br>
Once again, git is glorious. If you&rsquo;re starting out and are hesitant about using git,
just keep in mind that git will be your best friend. Especially when you
accidentally <code> rm -rf </code> (don&rsquo;t do this on files/folders if you don&rsquo;t know what it is)
a few files and you think the world is about to end (it happens).<br><br>
Look up tutorials, watch videos, and ask people who have been using it.
Getting git is an extremely powerful tool any developer can have, and I am very
glad that I took the time to understand its power.</p>
]]></content>
  </entry>
  
</feed>
