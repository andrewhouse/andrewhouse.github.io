<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[House of Rails]]></title>
  <link href="http://andrewhouse.github.io/atom.xml" rel="self"/>
  <link href="http://andrewhouse.github.io/"/>
  <updated>2014-10-07T21:58:19-04:00</updated>
  <id>http://andrewhouse.github.io/</id>
  <author>
    <name><![CDATA[Andrew House]]></name>
    <email><![CDATA[andrewhouse621@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[After: The Iron Yard Hackathon]]></title>
    <link href="http://andrewhouse.github.io/blog/2014/10/07/after-the-iron-yard-hackathon/"/>
    <updated>2014-10-07T21:44:41-04:00</updated>
    <id>http://andrewhouse.github.io/blog/2014/10/07/after-the-iron-yard-hackathon</id>
    <content type="html"><![CDATA[<p>That was intense.<br>
I had a really fun time this weekend.
It&rsquo;s amazing how much can be accomplished in such a short amount of time.
I went into the hackathon with the mindset of building something that would work when it was over.
I was successful.<br><br>
Our app was a pseudo dropbox that would be used by businesses and allow clients to
download/upload files without making an account.
I took the task of scrumming together a work flow for my team for the weekend,
gathering input from a couple of the pitchers.
Because of this, we never had a situation where we asked what was next.
At the end, I was told that I looked and acted like a project manager.
 Also, our app looked like an enterprise worthy application,
and was planned and built accordingly.
That was a pretty nice ego boost, to get feedback from strangers that my
techniques in building and managing and application are very effective.<br><br>
Working with a front end developer and an IOS developer was very fun.
Being able to cultivate my data to tailor their needs was different.
Our front end developer was very fresh to The Iron Yard (2 weeks in)
and was a stellar developer.
I took the time Saturday to teach him Haml and he took to it quickly(major props to you Dean).
Being on a team like that was worth the whole weekend to me.
To be around minds who also had a thirst for knowldge and had a different perspective on everything.
I look at things very logically, they had a much better perspective on design and user expereience.
I had a great team and more importantly had an absolute blast.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Before: The Iron Yard Hackathon]]></title>
    <link href="http://andrewhouse.github.io/blog/2014/10/03/before-the-iron-yard-hackathon/"/>
    <updated>2014-10-03T17:37:58-04:00</updated>
    <id>http://andrewhouse.github.io/blog/2014/10/03/before-the-iron-yard-hackathon</id>
    <content type="html"><![CDATA[<p>So in about 20 minutes the internal hackathon at The Iron Yard Atlanta is going to begin. <br>
I&rsquo;m pretty pumped.<br>
Not really knowing what I&rsquo;m going to be building.<br>
Who I&rsquo;m going to be working with.<br>
If I&rsquo;ll be able to do everything I want to in the time frame (probably not).<br>
All of these variables seem like it&rsquo;s going to bring an epic weekend.<br><br>
The teams are going to be preselected.
Each team will get at least one Rails Engineer, IOS Developer, and Front End Developer.
Most teams will be groups of 3, some groups of 4.
I&rsquo;m hoping to think that my team is going to be extraordinarily bad ass.
Well to be perfectly honest, everyone at The Iron Yard has talent.
Everyone will be able to contribute something.
I know going into it that I want my team to scrum our project.
I already have a nice spreadsheet laid out and ready to go.
Now it&rsquo;s only a matter of time before we start.<br><br>
I&rsquo;m excited.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Preparing for My Final Project]]></title>
    <link href="http://andrewhouse.github.io/blog/2014/09/25/preparing-for-my-final-project/"/>
    <updated>2014-09-25T08:38:05-04:00</updated>
    <id>http://andrewhouse.github.io/blog/2014/09/25/preparing-for-my-final-project</id>
    <content type="html"><![CDATA[<p>It&rsquo;s about to get crazy at The Iron Yard.<br>
We have a week and a half of lecture and practice until we begin final projects.
Honestly, I have no idea what I&rsquo;m going to do.
I know that I would love to build a site combining the strengths of Rails backend with Angular JS&rsquo;s front end.
I suck at ideas though.
If I have an idea of what to build, the general idea, then I can run with it and do something fun.
Getting that initial idea is hard as hell for me.
I plan on asking various people to get their advise for what kind of project would be memorable and useable.
From October 3-5 The Iron Yard is doing an internal hackathon (Combination of the Front End, IOS, and Rails classes) and I hope that I get an idea from there that I can run with for my final project.
I would love to work with other classes and form a Scrum centric idea process and work flow to knock down a project.<br> <br>
The last couple of weeks have been group projects for us.
Last week I was the project leader of our group and it was very different experience for me.
I didn&rsquo;t do pure scrum with the group.
I didn&rsquo;t get client input, or make a board.
I kind of winged the inputs in my head to develop a MVP.
This week the leader of our group was a former project manager, <a href="https://github.com/rjgroller">Robert Groller</a>, and knows how to use scrum.
Actual scrum implementation is much different than &ldquo;winging it&rdquo;.
I like the workflow process much better with full scrum.
The timeboxing, workflow, and everything.
I want this process in my final project.
My intention is to have James, my teacher, act as the client and give me feedback on what he thinks a user experience should find important in whatever I do. <br><br>
Now I just need to figure out what I&rsquo;m going to do.
I&rsquo;m sure I&rsquo;ll figure it out soon.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Omniauth - Logging in With Google]]></title>
    <link href="http://andrewhouse.github.io/blog/2014/09/21/omniauth-logging-in-with-google/"/>
    <updated>2014-09-21T08:42:44-04:00</updated>
    <id>http://andrewhouse.github.io/blog/2014/09/21/omniauth-logging-in-with-google</id>
    <content type="html"><![CDATA[<p>In this article I&rsquo;ll detail the process of logging into google via the
<a href="https://github.com/intridea/omniauth">Omniauth Gem</a>.<br>
I set up my code almost the same as how my teacher, <a href="https://github.com/jamesdabbs">James Dabbs</a>
at The Iron yard. Also keep in mind that <a href="https://github.com/plataformatec/devise">devise</a>
is needed to be setup before omniauth will work.<br></p>

<h3>Getting Set Up</h3>


<p>The first thing we will do is add of the gems and gem dependencies
we&rsquo;re going to need for logging into google.
There are two gems that are going to be needed.
The first is the actual Omniauth Gem and the second can be found
<a href="https://github.com/intridea/omniauth/wiki/List-of-Strategies">on the list of provider gems</a>
that are supported with Omniauth.
I decided to use the <a href="https://github.com/zquestz/omniauth-google-oauth2">google-oath-2</a>
gem.</p>

<figure class='code'><figcaption><span>Gemfile</span><a href='https://github.com/zquestz/omniauth-google-oauth2'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;omniauth&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s2">&quot;omniauth-google-oauth2&quot;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;hashie&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Note: Always run bundle after changing your gemfile</em><br>
<em>Note: I&rsquo;ll go into the purpose of Hashie in the identifier section</em><br></p>

<!-- more -->


<p>Next we will bundle our gems for use.</p>

<figure class='code'><figcaption><span>Terminal</span><a href='https://github.com/zquestz/omniauth-google-oauth2'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">bundle</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Note: bundle is shorthand for bundle install.</em><br></p>

<h3>Configuring Devise</h3>


<p>Next we need to configure devise to let it know that we are using
omniauth, and let it know where to put our API key and secret token.</p>

<figure class='code'><figcaption><span>~/config/initializers/devise.rb</span><a href='https://github.com/zquestz/omniauth-google-oauth2'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">omniauth</span> <span class="ss">:google_oauth2</span><span class="p">,</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;GOOGLE_ID&#39;</span><span class="o">]</span><span class="p">,</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;GOOGLE_SECRET&#39;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that in this case we are using environment variables.
It is not wise or safe to put any type of api keys, secrets, or passwords
live on the internet.
I suggest using the <a href="http://iamandrewhouse.com/blog/2014/08/14/figaro/">Figaro Gem</a>
to store environment variables for easy deployment to heroku.
Now we actually need te data to store in the (in this example)
&lsquo;GOOGLE_ID&rsquo; and &lsquo;GOOGLE_SECRET&rsquo;.<br></p>

<h3>Getting Key and Secret from Google</h3>


<p>The <a href="https://console.developers.google.com">Google Console</a> is the starting
point. Through here you go through the process of creating a new project.
I&rsquo;m not going to go into the specifics of what to click because it is pretty
straight forward, but I will cover the crucial information that is
needed.<br>
Once the project is created, under the tab API&rsquo;s &amp; auth select API&rsquo;s and
turn on Contacts API and Google+ API.<br>
Next, under the consent screen select an email-address and enter
a product name. <strong>THIS IS IMPORTANT</strong>.
The product name cannot be the same name as the project name (which
  can be seen on the top left corner of the console).<br>
Lastly we&rsquo;ll configure the credentials.
Since all I&rsquo;m going to use is for development I&rsquo;m going to put in
the url&rsquo;s as <a href="http://localhost:3000.">http://localhost:3000.</a> If you&rsquo;re going to deploy to an online
website, add the same url&rsquo;s as I&rsquo;m going to add, but replace
localhost:3000 with (for example) &lsquo;<a href="http://yourwebsitehere.com">http://yourwebsitehere.com</a>&rsquo;.<br>
Under Javascript Origins enter in <a href="http://localhost:3000.">http://localhost:3000.</a><br>
Under Redirect URI&rsquo;s enter <a href="http://localhost:3000/users/auth/google_oauth2/callback.">http://localhost:3000/users/auth/google_oauth2/callback.</a><br>
Keep in mind, the callback gave me a lot of trouble while setting up.
Various blogs never had the same callback.
This one worked for me because google told me to use it!
I got this information when I got to the point where I was trying to
login with google and on the 404 page it said it couldn&rsquo;t find
that url as a redirect uri.
If yours is different, add it onto the redirect uri list and prosper.<br>
Finally we can copy the Client ID as the GOOGLE_KEY and Client Secret
as GOOGLE_SECRET.
Again, see my <a href="http://iamandrewhouse.com/blog/2014/08/14/figaro/">Figaro</a>
blog post onto how to add in the two.</p>

<h3>Continuing Devise Setup</h3>


<p>Now we need to setup the routes so devise knows how to handle the
omniauth callback requests.</p>

<figure class='code'><figcaption><span>~/config/routes.rb</span><a href='https://github.com/zquestz/omniauth-google-oauth2'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">devise_for</span> <span class="ss">:users</span><span class="p">,</span> <span class="ss">:controllers</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">omniauth_callbacks</span><span class="p">:</span> <span class="s1">&#39;omniauth_callbacks&#39;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Note: My devise model is named Users, yours may be different.</em><br>
As you can guess sometime soon we&rsquo;re going to make a controller called
omniauth_callbacks. We&rsquo;ll get to that soon, first we need to
let the devise model know that our app is &ldquo;omniauthable&rdquo;.</p>

<figure class='code'><figcaption><span>~/app/models/user.rb</span><a href='https://github.com/zquestz/omniauth-google-oauth2'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">devise</span> <span class="ss">:database_authenticatable</span><span class="p">,</span> <span class="ss">:registerable</span><span class="p">,</span>
</span><span class='line'>         <span class="ss">:recoverable</span><span class="p">,</span> <span class="ss">:rememberable</span><span class="p">,</span> <span class="ss">:trackable</span><span class="p">,</span> <span class="ss">:validatable</span><span class="p">,</span> <span class="ss">:omniauthable</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Note: Again, my model is user.rb, yours may be different.
Also, note the addition of omniauthable.</em><br></p>

<h3>Configuring the Callback Controller</h3>


<p>Now we&rsquo;ll go ahead and setup the omniauth callbacks controller.
This controller will inherit from the devise:omniauth callbacks controller.
Essentially, we&rsquo;re adding methods for each provider.
Each method is named after the provider.
In my implementation, I&rsquo;m setting it up where it is easy to add
multiple providers, the only line that will need to be edited
after adding an additional provider is the array list of providers.</p>

<figure class='code'><figcaption><span>~/app/controllers/omniauth_callbacks_controller.rb</span><a href='https://github.com/zquestz/omniauth-google-oauth2'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">OmniauthCallbacksController</span> <span class="o">&lt;</span> <span class="no">Devise</span><span class="o">::</span><span class="no">OmniauthCallbacksController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">provides_callback_for</span><span class="p">(</span><span class="n">provider</span><span class="p">)</span>
</span><span class='line'>    <span class="n">define_method</span> <span class="n">provider</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">auth</span> <span class="o">=</span> <span class="n">env</span><span class="o">[</span><span class="s2">&quot;omniauth.auth&quot;</span><span class="o">]</span>
</span><span class='line'>      <span class="vi">@user</span> <span class="o">=</span> <span class="no">Identifier</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">auth</span><span class="p">,</span> <span class="n">current_user</span><span class="p">)</span><span class="o">.</span><span class="n">resolve</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="vi">@user</span><span class="o">.</span><span class="n">persisted?</span>
</span><span class='line'>        <span class="n">sign_in_and_redirect</span> <span class="vi">@user</span><span class="p">,</span> <span class="ss">event</span><span class="p">:</span> <span class="ss">:authentication</span>
</span><span class='line'>        <span class="n">set_flash_message</span><span class="p">(</span><span class="ss">:notice</span><span class="p">,</span> <span class="ss">:success</span><span class="p">,</span> <span class="ss">kind</span><span class="p">:</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">provider</span><span class="si">}</span><span class="s2">&quot;</span><span class="o">.</span><span class="n">capitalize</span><span class="p">)</span> <span class="k">if</span> <span class="n">is_navigational_format?</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="n">session</span><span class="o">[</span><span class="s2">&quot;devise.</span><span class="si">#{</span><span class="n">provider</span><span class="si">}</span><span class="s2">_data&quot;</span><span class="o">]</span> <span class="o">=</span> <span class="n">auth</span>
</span><span class='line'>        <span class="n">redirect_to</span> <span class="n">new_user_registration_url</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="o">[</span><span class="ss">:google_oauth2</span><span class="o">].</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">provider</span><span class="o">|</span> <span class="n">provides_callback_for</span> <span class="n">provider</span> <span class="p">}</span>
</span><span class='line'>  <span class="c1"># ^ Here is where you add additional providers.</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>One thing may stick out as being odd.
The Identifier.new hasn&rsquo;t been defined yet.
Next we&rsquo;ll create a service called just that with the purpose of
managing the creation of identities (a model which we will also set up).
The general idea is a User has many identities.
An identity being the providers themselves.
With this setup, a person can sign into google, amazon, or whatever
and maintain the user.</p>

<h3>Creating the Identifier Service</h3>


<figure class='code'><figcaption><span>~/app/services/identifier.rb</span><a href='https://github.com/zquestz/omniauth-google-oauth2'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Identifier</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span> <span class="n">auth</span><span class="p">,</span> <span class="n">user</span><span class="o">=</span><span class="kp">nil</span>
</span><span class='line'>    <span class="vi">@auth</span> <span class="o">=</span> <span class="no">Hashie</span><span class="o">::</span><span class="no">Mash</span><span class="o">.</span><span class="n">new</span> <span class="n">auth</span>
</span><span class='line'>    <span class="vi">@user</span> <span class="o">=</span> <span class="n">user</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">resolve</span>
</span><span class='line'>    <span class="n">identity</span> <span class="o">=</span> <span class="n">find_or_create_identity</span>
</span><span class='line'>    <span class="n">user</span>     <span class="o">=</span> <span class="n">ensure_user</span> <span class="n">identity</span>
</span><span class='line'>    <span class="n">link</span> <span class="n">identity</span><span class="p">,</span> <span class="n">user</span>
</span><span class='line'>    <span class="n">user</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">find_or_create_identity</span>
</span><span class='line'>    <span class="no">Identity</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="ss">provider</span><span class="p">:</span> <span class="vi">@auth</span><span class="o">.</span><span class="n">provider</span><span class="p">,</span> <span class="ss">uid</span><span class="p">:</span> <span class="vi">@auth</span><span class="o">.</span><span class="n">uid</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'>      <span class="n">create_with</span><span class="p">(</span><span class="ss">auth_data</span><span class="p">:</span> <span class="vi">@auth</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'>      <span class="n">first_or_create!</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">ensure_user</span> <span class="n">identity</span>
</span><span class='line'>    <span class="vi">@user</span> <span class="o">||=</span> <span class="n">identity</span><span class="o">.</span><span class="n">user</span>
</span><span class='line'>    <span class="k">return</span> <span class="vi">@user</span> <span class="k">if</span> <span class="vi">@user</span>
</span><span class='line'>
</span><span class='line'>    <span class="vi">@user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="ss">email</span><span class="p">:</span> <span class="n">identity</span><span class="o">.</span><span class="n">email</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'>      <span class="n">create_with</span><span class="p">(</span>
</span><span class='line'>        <span class="nb">name</span><span class="p">:</span>      <span class="n">identity</span><span class="o">.</span><span class="n">name</span><span class="p">,</span>
</span><span class='line'>        <span class="ss">password</span><span class="p">:</span>  <span class="no">Devise</span><span class="o">.</span><span class="n">friendly_token</span><span class="o">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">20</span><span class="o">]</span>
</span><span class='line'>      <span class="p">)</span><span class="o">.</span><span class="n">first_or_create!</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">link</span> <span class="n">identity</span><span class="p">,</span> <span class="n">user</span>
</span><span class='line'>    <span class="n">identity</span><span class="o">.</span><span class="n">update_attribute</span> <span class="ss">:user</span><span class="p">,</span> <span class="n">user</span> <span class="k">unless</span> <span class="n">identity</span><span class="o">.</span><span class="n">user</span> <span class="o">==</span> <span class="n">user</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>It would take a while to type out what each individual method is doing.
Hashie::Mash is from the hashie gem.
Essentially, it allows the use of the dot syntax from returned JSON
and not having to use the bracket syntax all the time.
You&rsquo;ll see a lot of talk of identity. It may feel awkward because
we haven&rsquo;t defined the Identity Model yet.
Take note of the resolve method which was called in the omniauth callbacks
controller.
On the creation of an Identifier we pass in the current_user and
the data generated from the provider to check and see if the
user exists with another provider and if that provider has already been
created. If it hasn&rsquo;t been created, it is and if not then it returns
the provider.</p>

<h3>Creating the Identity Model with Relationships </h3>


<p>Next we need to create the Identity Model and relate it to the User.</p>

<figure class='code'><figcaption><span>Terminal</span><a href='https://github.com/zquestz/omniauth-google-oauth2'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">rails g model Identity user_id:integer provider uid auth_data:text</span>
</span><span class='line'><span class="go">rake db:migrate</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now that the model has been created and migrated, lets go ahead and
set up the relationships.</p>

<figure class='code'><figcaption><span>~/app/models/user.rb</span><a href='https://github.com/zquestz/omniauth-google-oauth2'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">devise</span> <span class="ss">:database_authenticatable</span><span class="p">,</span> <span class="ss">:registerable</span><span class="p">,</span>
</span><span class='line'>         <span class="ss">:recoverable</span><span class="p">,</span> <span class="ss">:rememberable</span><span class="p">,</span> <span class="ss">:trackable</span><span class="p">,</span> <span class="ss">:validatable</span><span class="p">,</span> <span class="ss">:omniauthable</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:identities</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Note: This is for the User Model.</em><br><br>
Now the Identity Model will have a bit more complexity.</p>

<figure class='code'><figcaption><span>~/app/models/identity.rb</span><a href='https://github.com/zquestz/omniauth-google-oauth2'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Identity</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:user</span>
</span><span class='line'>  <span class="n">validates_presence_of</span> <span class="ss">:uid</span><span class="p">,</span> <span class="ss">:provider</span>
</span><span class='line'>  <span class="n">validates_uniqueness_of</span> <span class="ss">:uid</span><span class="p">,</span> <span class="ss">:scope</span> <span class="o">=&gt;</span> <span class="ss">:provider</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">serialize</span> <span class="ss">:auth_data</span><span class="p">,</span> <span class="no">JSON</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">auth</span>
</span><span class='line'>    <span class="no">Hashie</span><span class="o">::</span><span class="no">Mash</span><span class="o">.</span><span class="n">new</span> <span class="n">auth_data</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="sx">%w(name email image)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="kp">attr</span><span class="o">|</span>
</span><span class='line'>    <span class="n">define_method</span> <span class="kp">attr</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">auth</span><span class="o">.</span><span class="n">info</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="kp">attr</span><span class="p">)</span> <span class="o">||</span> <span class="k">raise</span><span class="p">(</span><span class="s2">&quot;Could not find </span><span class="si">#{</span><span class="kp">attr</span><span class="si">}</span><span class="s2"> in </span><span class="si">#{</span><span class="n">auth</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>There are a few things going on here.
The relationship connection, validations, serialization to json, and
creating methods.
Now we can call things like current_user.identities.first.provider
Which will return &ldquo;google_oath2&rdquo; if it was your first sign in (since
  identities returns an array).
Likewise, current_user.identities.first.auth_data will return all
of the data from google.
I can see keys such as first name, last name, email, images and more!</p>

<h3>Calling the Sign in with Google Link</h3>


<p>If you look in ~/apps/views/devise/shared/links.html.haml (I&rsquo;m using haml).
There is this line of code at the bottom.</p>

<figure class='code'><figcaption><span>~/apps/views/devise/shared/links.html.haml</span><a href='https://github.com/zquestz/omniauth-google-oauth2'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">-</span> <span class="k">if</span> <span class="n">devise_mapping</span><span class="o">.</span><span class="n">omniauthable?</span>
</span><span class='line'>  <span class="o">-</span> <span class="n">resource_class</span><span class="o">.</span><span class="n">omniauth_providers</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">provider</span><span class="o">|</span>
</span><span class='line'>    <span class="o">=</span> <span class="n">link_to</span> <span class="s2">&quot;Sign in with </span><span class="si">#{</span><span class="n">provider</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">titleize</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="n">omniauth_authorize_path</span><span class="p">(</span><span class="n">resource_name</span><span class="p">,</span> <span class="n">provider</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you click on the normal devise sign in route, you&rsquo;ll see that
sign in with google was automatically generated for you.
If you want to add your own custom link on a given page, use this link.</p>

<figure class='code'><figcaption><span>~/apps/views/yourview/index.html.haml</span><a href='https://github.com/zquestz/omniauth-google-oauth2'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">=</span> <span class="n">link_to</span> <span class="s2">&quot;Sign in with Google&quot;</span><span class="p">,</span> <span class="n">user_omniauth_authorize_path</span><span class="p">(</span><span class="ss">:google_oauth2</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Conclusion</h3>


<p>With this lies the completion of connecting to google using the omniauth
gem.
The purpose of this tutorial was to allow the addition of other providers
with very few lines of code.
Lets say for example you were wanted to add facebook.
You would need to add the omniauth-facebook gem, add the config under
devise.rb, create the api key/secret from the facebook developers page,
setup the redirect uri callback from facebook,
log that information into application.yml (if you&rsquo;re using figaro), and
finally in the omniauth_callbacks controller add :facebook to the
array of providers.<br><br>
Something like facebook is easy to integrate with the current setup.
There are a couple of providers that aren&rsquo;t so easy.
Twitter and Linkedin don&rsquo;t return email addresses in their auth_data.
Since devise requires email I&rsquo;m sure you can see the hassel.
Some strategies are to after clicking the sign in with twitter button,
have them fill out a quick form for email, or to randomly generate an
email for them.<br><br>
Either way, good luck and happy coding!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Intro to Omniauth]]></title>
    <link href="http://andrewhouse.github.io/blog/2014/09/17/intro-to-omniauth/"/>
    <updated>2014-09-17T09:01:26-04:00</updated>
    <id>http://andrewhouse.github.io/blog/2014/09/17/intro-to-omniauth</id>
    <content type="html"><![CDATA[<p>It is becoming a trend for websites to enable logging into that website
via another.<br>
We&rsquo;ve all seen it.
The buttons that say &ldquo;Sign in with Facebook&rdquo;, or various other
providers.
For some reason unknown to me (really unknown to me because I don&rsquo;t
use social media), seeing these logins provide some kind of weird
validity to a website.
It&rsquo;s like &ldquo;Oh, they are connected with facebook, they must be credible&rdquo;.
When I know perfectly well that its just a little bit of code hooking into
the facebook api.
Regardless, implementing these login features for a user is a
great strategy from a user experience (UX) standpoint.<br><br>
Over the next few blog posts I&rsquo;m going to go over step by step
using provider authentication, and being able to use multiple
providers for the same user.
I feel logging into various providers is a valuable skill for every Rails developer, and
a great tool to be able to use.<br>
In the upcoming posts, I&rsquo;ll use Amazon and Google as my examples.
I&rsquo;ll also detail what is needed to add another provider, and some quirks
about certain ones (Twitter).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Security With Rails]]></title>
    <link href="http://andrewhouse.github.io/blog/2014/09/11/security-with-rails/"/>
    <updated>2014-09-11T07:53:39-04:00</updated>
    <id>http://andrewhouse.github.io/blog/2014/09/11/security-with-rails</id>
    <content type="html"><![CDATA[<p>There is so much I don&rsquo;t know about security.<br>
Yet it is so fascinating.
Yesterday I attended a workshop hosted by <a href="https://nvisium.com/">Nvisium</a>, with the premise
of discussing vulnerabilities in Rails and how to avoid them.
It amazes me how much security professionals know.
In order to understand security, you need to know everything about
the framework you&rsquo;re using, as well as exactly how the web works.<br><br>
The workshop was led by <a href="https://twitter.com/cktricky">Ken Johnson</a>, the
CTO of Nvisium.
I won&rsquo;t go into the details of exactly what we did and what we covered.
Instead I&rsquo;ll focus on mainly what I gained from the workshop.
For me, Security has three faces.<br><br>
The first face is owned by the designers and those who develop the front
end.
For them, the only care for security is that it is there, but doesn&rsquo;t
change how they want to order and design the page. <br><br>
The second face is owned by the developers who want to get code to work.
I am guilty of this.
I generally attack code trying to get a feature to work, not really thinking
about how the parameter I have listed could be sql injected or could
give away a person&rsquo;s id to allow to try to narrow down who is admin
and try to attack that specific person.<br><br>
The last side lies on the ones who want to protect security.
For them, trying to convince the first two to use best security practices
must be an absolute headache.
To take a feature that looks the way the design team wants, and functions
the way the developers want, and tell them that they are vulnerable
to attacks.
It seems to me that they would always be the &ldquo;bad&rdquo; guy in that situation.
People care about security, as long as it doesn&rsquo;t effect their daily lives.<br><br>
I took a lot of notes and got a ton of resources from the workshop.
My plan is to try to do the best I can do make sure that I plug the big
holes of security in my apps.
I know that at my current state of being a junior developer that it would
be impossible to try and do everything, but I will take all the
necessary steps to prevent my app from being completely vulnerable.<br></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Enforcing Knowledge]]></title>
    <link href="http://andrewhouse.github.io/blog/2014/09/08/enforcing-knowledge/"/>
    <updated>2014-09-08T14:15:58-04:00</updated>
    <id>http://andrewhouse.github.io/blog/2014/09/08/enforcing-knowledge</id>
    <content type="html"><![CDATA[<p>We go through material so fast at The Iron Yard.<br>
It isn&rsquo;t like we go through things too fast, but just fast enough
to understand everything.
I personally have a tendency to forget basic syntax when blazing through
new material.<br>
Do I put a semi-colon here or wrap it in quotation marks?<br>
Do I need curly brackets here?<br>
Little details like that come up often in my brain.
I find it helpful to try to not remember the exact syntax, but where
I wrote code similar to that to reference.
That way I&rsquo;m not trying to rush and memorize specific syntax, but
over time as I continuously refer to my own work it will become
more normal.<br><br>
Personally, I enjoy looking at code that I have wrote before.
Especially code that I don&rsquo;t remember.
I can see my progress and have the &ldquo;what was I thinking when I wrote this?&rdquo;
moments.
To be able to mock my previous self is crucial in self evolution.
See what I did, and make it better.
Then I&rsquo;m not just referencing some article online, but take something
that I put time into and make a new reference by upgrading it.
There is always something to do.
Code can always be smaller, faster, and more efficient.
It&rsquo;s my job to find a perfect balance between those and the time it takes
to write the code.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Searching With Angular]]></title>
    <link href="http://andrewhouse.github.io/blog/2014/09/05/searching-with-angular/"/>
    <updated>2014-09-05T10:47:25-04:00</updated>
    <id>http://andrewhouse.github.io/blog/2014/09/05/searching-with-angular</id>
    <content type="html"><![CDATA[<p>AngularJS is so badass.<br>
This past week, I&rsquo;ve been working non-stop on the Homework App
James(my teacher at The Iron Yard) and I have been building.
As an admin, James can post assignments and students can post
the link to their homework and let us know if they are finished or not.
We were trying to figure out a way to be able to easily search through
all of the assignments and be able to display specific dates, titles, or
even the description of the assignment.
This is where AngularJS came in.<br><br>
My knowledge of AngularJS coming into this was pretty minimal.
I knew the basics of how it was supposed to work and some of the power
behind it.
I didn&rsquo;t know how to hook Rails data into Angular.
The only hint James gave me was that I would need to use ngResource.
After reading several articles, I found a nice little snippet of code
that appeared to use Rails rendered data in Json format.<br>
Perfect!<br>
From there I was able to grab the data and implement a new table using
only Angular.<br>
Once the table was complete, I started on the journey of implementing
the search function.
After playing around for a few minutes and figuring out where I needed
to put in the filters, I was having a problem saying exactly what
I wanted to search for.
I talked to James and he showed me how to create my own filter in Angular.
From there I built the search filter&hellip;and holy shit it worked.<br>
I was amazed.<br>
I had integrated a working AngularJS search function into my app and
it worked wonderfully.
Mixing in languages was difficult, but a ton of fun.
I feel like I learned some valuable skills while implementing this.
Coding is so much fun.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Breaking the Norm]]></title>
    <link href="http://andrewhouse.github.io/blog/2014/09/02/breaking-the-norm/"/>
    <updated>2014-09-02T21:23:54-04:00</updated>
    <id>http://andrewhouse.github.io/blog/2014/09/02/breaking-the-norm</id>
    <content type="html"><![CDATA[<p>I have been living in a state of being uncomfortable.<br>
It&rsquo;s a weird feeling.
Always having to look up resources, reading articles, and watching videos.<br>
It is constant learning.<br>
At first, this style was incredibly uneasy.
I would feel constantly anxious and stressed.
Why didn&rsquo;t I have the answers?
Why was I having such a hard time finding answers?
There is a great skill in asking the right questions, and a very valuable lesson
I learned.
I think my next blog post will be how to google 101, or googling for rails dummies.
The evolution of my ability to see through what problem I am facing and
being able to search for that specific problem has been astonishing.
I&rsquo;m starting to transition from being uneasy all the time to enjoying the hunt.<br><br>
Where are the answers?<br>
Which answer is the best for my needs?<br>
Can I tweak the answer to get better results?<br><br>
I feel like this is a great mentality to have.
To be always improving is what it takes to be a developer.
Breaking my old ways of doing what it is easy, digging into the trenches,
and putting some sweat equity into me.
It&rsquo;s a pretty rewarding feeling.
Looking at myself from the outside in and noticing a change.
I am so glad that I am coding.
It truly was a life altering choice to come to The Iron Yard.
Not only will I become a badass Rails Dev, but I will also be closer to
my true self.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Redesigning an App]]></title>
    <link href="http://andrewhouse.github.io/blog/2014/08/31/redesigning-an-app/"/>
    <updated>2014-08-31T13:27:26-04:00</updated>
    <id>http://andrewhouse.github.io/blog/2014/08/31/redesigning-an-app</id>
    <content type="html"><![CDATA[<p>I&rsquo;m learning things way too fast.<br>
Currently I am in the process of building a web app for my class at The
Iron Yard.
The app is a centralized place where the teacher can post assignments
and we can post a link to our assignment and check to see if it is finished
or not.
It&rsquo;s going great and it is working.
However, I want it to do so much more.<br><br>
This weekend I found myself making profile pages for each user.
I&rsquo;m not any good at design so it was challenging for me to try to tap into
what little artistic vision I have.
Partway through implementing the design, I kept wanting to work on other
features and develop it so much further.
I want to add a better search feature using Angular (still working on
figuring it out), add a sort function for the assignments, add comments
on each individual assignment a student posts, and so much more!<br><br>
I have ideas galore on how to expand this to fit the needs for our class,
but I don&rsquo;t have enough time to implement them all.
While studying and learning new skills every day, and researching what I need
to do for the app.
I find myself trying to prioritize what features I want to do.
Do I take the least path of resistance and implement what would be easiest?
Or do I study a language I haven&rsquo;t used and try to work in this cool feature?<br><br>
The good news is that I am having fun and want to do them all.
Each feature is in its own a great challenge, and without challenges life is boring.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Crazy Easy Gravatars]]></title>
    <link href="http://andrewhouse.github.io/blog/2014/08/29/crazy-easy-gravatars/"/>
    <updated>2014-08-29T14:24:22-04:00</updated>
    <id>http://andrewhouse.github.io/blog/2014/08/29/crazy-easy-gravatars</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/chrislloyd/gravtastic">Gravtastic</a> saves a ton of headaches when wanting a gravatar.<br>
In 4 lines of code (seriously 4) I had a gravatar up and running on my app.
Here&rsquo;s how. <br></p>

<h3>Getting Started</h3>


<p>Keep in mind, gravtastic relies on Devise to work. So all of the instructions are
to be used after Devise is setup.<br>
Go ahead and add the gem gravtastic to your Gemfile.</p>

<figure class='code'><figcaption><span>Gemfile</span><a href='https://github.com/chrislloyd/gravtastic'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;gravtastic&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p><br>
As always, make sure to bundle after installing a gem.</p>

<figure class='code'><figcaption><span>Terminal</span><a href='https://github.com/chrislloyd/gravtastic'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">bundle</span>
</span></code></pre></td></tr></table></div></figure>


<p><br></p>

<h3>Implementation</h3>


<p>Now we need to make sure our model uses gravtastic. Your file may be different
depending on what you named your devise model.
I&rsquo;m going to name mine User and generate the code on that premise.</p>

<figure class='code'><figcaption><span>app/models/user.rb</span><a href='https://github.com/chrislloyd/gravtastic'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Gravtastic</span>
</span><span class='line'>  <span class="n">gravtastic</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><br>
With that gravtastic has been able to hook into your devise model. Hooray!
The last job is rendering the gravatar to the view.<br>
I&rsquo;m using Haml, so the html syntax may be weird. If you&rsquo;re using Erb, just
replace the = with &lt;%= and end the line with %></p>

<figure class='code'><figcaption><span>app/views/whicheverview.html.haml</span><a href='https://github.com/chrislloyd/gravtastic'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haml'><span class='line'><span class="p">=</span><span class="n">image_tag</span> <span class="n">current_user</span><span class="o">.</span><span class="n">gravatar_url</span>
</span></code></pre></td></tr></table></div></figure>


<p><br>
That&rsquo;s it!<br>
Now a gravatar should be rendering on your page.
If you want to adjust the size you can pass a size option on gravtastic in the model.
The specifics of different options to use can be found on
the <a href="https://github.com/chrislloyd/gravtastic">Gravtastic Github Page</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building an API With Rails]]></title>
    <link href="http://andrewhouse.github.io/blog/2014/08/28/building-an-api-with-rails/"/>
    <updated>2014-08-28T16:10:35-04:00</updated>
    <id>http://andrewhouse.github.io/blog/2014/08/28/building-an-api-with-rails</id>
    <content type="html"><![CDATA[<p>I think API&rsquo;s are amazing.<br>
It&rsquo;s kind of weird how much I&rsquo;m into API&rsquo;s lately.
Yet, I&rsquo;ve only technically made one (and oh my goodness was it a small one).
I hold much value in the flexibility that an API provides.
To be able to talk to multiple devises in different languages by only providing
the necessary data.<br><br>
Data is my thing.<br><br>
It&rsquo;s nice not having to worry about making anything pretty.
If I want to see if my data is working the way I want I can just do a quick curl.
I&rsquo;m currently having a problem figuring out authenticity tokens.
But that is okay, it&rsquo;s just another hurdle to overcome.<br><br>
When I can easily implement an API I feel as though my self worth will go up drastically.
Reason being, at The Iron Yard in Atlanta there are 3 cohorts (currently 2
  since the front end class just graduated) and a well developed API
  could easily tie together all 3 classes.
How cool is that?
To be able to work with multiple people on a singular project.<br>
All because data is badass.<br><br>
I look forward to creating amazing API&rsquo;s in the future and look forward to
understanding enough Angular JS to be able to call on my API&rsquo;s information.
Doing Full Stack work sounds like a lot of work and would be a ton of fun.<br>
I&rsquo;m excited about the future.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing for Dummies]]></title>
    <link href="http://andrewhouse.github.io/blog/2014/08/27/testing-for-dummies/"/>
    <updated>2014-08-27T08:56:38-04:00</updated>
    <id>http://andrewhouse.github.io/blog/2014/08/27/testing-for-dummies</id>
    <content type="html"><![CDATA[<p>I suck at testing.<br>
There are some things that click, and some that don&rsquo;t.
For me, testing doesn&rsquo;t click.
I understand the benefit of it, helping getting my thoughts in order and
drive code in a structured way.
I don&rsquo;t know if its the specific DSL of using rspec, or what.
But I am not good at it (yet).<br><br>
Since testing is my achilles heel, I&rsquo;ve decided to make it my prerogative
to get it down.
I don&rsquo;t want to back away from a challenge just because I don&rsquo;t get it at first.
It&rsquo;s completely okay that I&rsquo;m not good at testing right now.
The reason I&rsquo;m at The Iron Yard is because I don&rsquo;t have all the skills required
to be a proficient Junior Rails Developer at my current level.
That&rsquo;s why I&rsquo;m going to use the time that I have here to master any skills
that I&rsquo;m not good at.
Testing is currently at the top of my list.
Once I get it down (and I will get it down) I&rsquo;ll move on to the next beast.
Keep knocking them down one after another until I feel confident doing what I&rsquo;m doing.
Then when I&rsquo;m confident, look at some amazing code that I don&rsquo;t understand
and begin the journey again.
Learning is an ongoing process and it&rsquo;s something that is needed by a
web engineer.
To be able to continuously challenge myself and push into the next technology.
Adapting, evolving, and challenging.
Three things that I love to do and will continue to do for as long as I can.<br>
Coding is fun.
Always changing and never perfect.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Forge Hackathon]]></title>
    <link href="http://andrewhouse.github.io/blog/2014/08/25/forge-hackathon/"/>
    <updated>2014-08-25T10:27:33-04:00</updated>
    <id>http://andrewhouse.github.io/blog/2014/08/25/forge-hackathon</id>
    <content type="html"><![CDATA[<p>I was a mentor at my first hackathon.<br>
Weird right?
The Iron Yard was a sponsor at the <a href="http://forgeatl.com/">Forge Hackathon</a> in Atlanta,
and they asked their students if some of them would like to be mentors.
I thought it would be a great experience to see what a hackathon&rsquo;s atmosphere
is like, and talk to people and see what they&rsquo;re thinking.
So I roll in Saturday morning and sit in a room just for software development.
My role as a mentor was to sit and wait for people to ask for help.
After about 5 minutes of sitting, I was approached by a team looking for help.<br><br>
Their idea was that they were developing a wearable band that doctors were
able to update their personal data.
Such as basic information (name, birthday, etc) and more elaborate data such
as diseases, medication, etc.
The problem they had was that their target locations only had internet once every
few months and didn&rsquo;t know how to store their data locally.
I recommended storing basic data on the wristband (before they were only trying
to store the data on a server with a wristband having only an id).
This way, when the doctor has internet they can push their data up to the server,
allowing the internet copy to be up to date.
The copy on the wristband would be as current as the doctor&rsquo;s version is.
So if they were to move and go to a different doctor, that doctor would
have the most up to date version that their previous doctor had.<br>
Then afterwards I explained strategies to span out their data model into
separate categories to help future expansion and allow for easier transitions
of adding data.
For example, <br>
instead of having a single User table, break medication, doctors, &amp; diseases
into a separate table so that adding and removing data would be much more
efficient. <br><br>
All in all, they seemed to really enjoy my feedback (actually, I asked if
I was helpful and they said I was a huge help).
My first hackathon experience was pretty awesome, it helped my resolve in
believing in myself and trusting the knowledge I have to help others.
It&rsquo;s a spectacular feeling.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Front End Demo Day]]></title>
    <link href="http://andrewhouse.github.io/blog/2014/08/22/front-end-demo-day/"/>
    <updated>2014-08-22T21:06:36-04:00</updated>
    <id>http://andrewhouse.github.io/blog/2014/08/22/front-end-demo-day</id>
    <content type="html"><![CDATA[<p>Today the Front End course for The Iron Yard students in Atlanta showed their
final projects.<br>
I thought it was a very interesting experience.
There were probably around 50-60 people attending, some Iron Yard affiliated, and
some potential employers.
And everyone was there to see the final projects for a few individuals.
It kind of got my blood pumping.
In just two short months I will be up on the stage showing off whatever
project it is that I do.
Our class (Ruby on Rails) will be giving their presentations at the same time
as the IOS class.
Which means my project needs to be twice as amazing as everyone elses.
The pressure is on, the timer has started.
There will be a ton of code cranked out in a few months.
Now I just have to figure out what in the hell I&rsquo;m going to do.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning by Doing]]></title>
    <link href="http://andrewhouse.github.io/blog/2014/08/21/learning-by-doing/"/>
    <updated>2014-08-21T09:02:02-04:00</updated>
    <id>http://andrewhouse.github.io/blog/2014/08/21/learning-by-doing</id>
    <content type="html"><![CDATA[<p>I have a problem when it comes to learning new skills/languages.<br>
I am very theoretical minded person in a sense that I could read and watch
videos about anything and be content.
However, I have found that knowledge doesn&rsquo;t stick as well with me if I don&rsquo;t
implement what I have learned.<br><br>
Example:<br>
I&rsquo;m in the process of learning <a href="http://iamandrewhouse.com/blog/2014/08/19/starting-angular-js/">Angular Js</a>
and a few months ago I did the Code School course.
When going over the course again, I noticed that I remembered a lot of theory.
Things like, I&rsquo;m able to make controllers in a separate JS file and integrate
them into the HTML directly. Little detailed parts of a whole I remembered, but
when it came to actual implementation I had forgotten the majority of it.
That allowed me to catch up fairly quickly on what I was doing, I felt
when I was learning it again a kind of snowball effect.
Where everything felt strange at first, but the more I did the quicker it
came back to me.
However, I don&rsquo;t want to fall that far back again.
So this time I&rsquo;m going to try a much different strategy.<br><br></p>

<!-- more -->


<p>I&rsquo;ve decided on the majority of the Rails apps that I am going to be building
in my upcoming weeks at The Iron Yard, that I would try to integrate Angular JS
into my front end if just a little bit.
Constantly reminding myself of what it is, how to use it, and how to use its
incredibly responsive design to the optimal efficiency.
I feel like I need to retain what I am learning by keeping on using it.
It seems pretty basic, but it will be effort to constantly be using it and
integrating it into my designs.
Eventually I feel like I will be comfortable enough to not be integrating
Angular JS into Rails, but develop API&rsquo;s with Rails and have Angular call
the JSON data returned and have two separate entities.
This is where I want to be and what I want to develop. <br><br>
I feel strongly about taking my Rails applications towards an API path.
To me, this is where the power of Rails really comes in.
To be able to quickly and efficiently build an API and let multiple
mediums use the data that I create.
One of the other classes at The Iron Yard is an IOS class.
Here in the upcoming weeks we are going to be doing an internal Hackathon,
being able for all of us to use our skills together.
I want to be able to make an API that is usable by IOS, front-end, etc etc.
This excites me greatly.
I have a path and I&rsquo;m looking forward to walking it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Starting Angular JS]]></title>
    <link href="http://andrewhouse.github.io/blog/2014/08/19/starting-angular-js/"/>
    <updated>2014-08-19T08:41:45-04:00</updated>
    <id>http://andrewhouse.github.io/blog/2014/08/19/starting-angular-js</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve decided to be full stack would be fun. <br>
I&rsquo;m starting to progress nicely in implementing rails features, and my instructor
James suggested that I take an interest in learning and implementing a
front end client.
I had taken the <a href="https://www.codeschool.com/courses/shaping-up-with-angular-js">Code School Course</a>
on starting Angular JS and I liked it&rsquo;s flow.
The framework seemed less verbose than Backbone JS, although it&rsquo;s entire syntax
structure is odd at first.
I like the way it read on an html page.
I know that sounds weird with all of the controller&rsquo;s and directives, but I dig it.<br><br>
Since I took this course a few months ago, I&rsquo;m going to go through it again to
freshen up on the basics.
After that I&rsquo;m going to go through the <a href="https://docs.angularjs.org/tutorial/">Tutorial</a>
on the Angular JS Documentation.
Once I get a good feeling of the flow of Angular, I&rsquo;m probably going to try and
implement it into my <a href="http://tiy-homework.herokuapp.com">The Iron Yard Homework App</a>.
I know it will be a long road to get a feeling of the flow of Angular JS, but I
feel like in the end, it will be a valuable skill to have.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Homework App]]></title>
    <link href="http://andrewhouse.github.io/blog/2014/08/18/homework-app/"/>
    <updated>2014-08-18T15:40:16-04:00</updated>
    <id>http://andrewhouse.github.io/blog/2014/08/18/homework-app</id>
    <content type="html"><![CDATA[<p>I built an app which some of my fellow students can use as a medium to give
progress on their homework assignments.<br>
<a href="http://tiy-homework.herokuapp.com">My App</a> uses Devise for registering users,
Heroku as the means for depoloyment, and a vast array of fun gems.
The whole point of the app is that there is a central place where our teacher
(James Dabbs) can check our homework progress.
James is the only authorized user (admin) capable of making new assignments.
Then each student can update the status of their homework by selecting a created
assignment, post the link of their website, and check to see if the assignment
has been completed.<br><br>
I think it works pretty well, all of the CSS was done with the help of
<a href="http://getbootstrap.com/">Twitter Bootstrap</a>. If you are interested in
checking out my code, I have it posted on <a href="https://github.com/andrewhouse/TIY-Homework-Checker">Github</a>.
<br>
But yea, making apps are fun. I had a lot of challenges in this app.
Something different I did in this that I had never done before was implementing
a has_many_through relationship.
It required me to do quite a bit of reading to see how each piece interacted,
but in the end it was totally worth it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Figaro]]></title>
    <link href="http://andrewhouse.github.io/blog/2014/08/14/figaro/"/>
    <updated>2014-08-14T10:12:31-04:00</updated>
    <id>http://andrewhouse.github.io/blog/2014/08/14/figaro</id>
    <content type="html"><![CDATA[<p>Once upon a time when I didn&rsquo;t know what I was doing.<br>
I was trying to setup a rails app for my wife and have her family upload
images and a birthday message.
After some research, I decided to use Amazon Web Services to host my images.
I got it configured in my rails app with Paperclip and that is when I made
a fatal, fatal, fatal error.<br><br>
I put in my bucketname and password directly into my code.<br><br>
The following morning, I received a call from Amazon.
Confirming whether I had setup 5 instances across the world racking up $250
overnight.<br>
I freaked out a little.<br>
After getting that resolved, I searched for how I can avoid making that
stupid mistake again.
My research turned up a gem called <strong>Figaro</strong>.<br>
<a href="https://github.com/laserlemon/figaro">Figaro</a> is used to hide confidential information.
Usernames, passwords, you name it and it will store the variables in a file
that will be automatically ignored from git and can easily be configured
for <a href="http://heroku.com">Heroku</a>. <br></p>

<h3>Getting Started</h3>


<p>As always, you want to start by adding Figaro to your Gemfile.</p>

<figure class='code'><figcaption><span>Gemfile</span><a href='https://github.com/laserlemon/figaro'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;figaro&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<!-- more -->


<p><em>Note: Always run bundle after changing your gemfile</em><br><br>
Next we will bundle our gems for use.</p>

<figure class='code'><figcaption><span>Terminal</span><a href='https://github.com/laserlemon/figaro'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">bundle</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Note: bundle is shorthand for bundle install.</em><br></p>

<h3>Generating and Using Figaro Logic</h3>


<p>The Figaro gem comes with a generator that will have rails install the
<em>&lsquo;./config/application.yml&rsquo;</em> file, and add it to the git ignore list.</p>

<figure class='code'><figcaption><span>Terminal</span><a href='https://github.com/laserlemon/figaro'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">figaro install</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>UPDATE: with the new version of Figaro, the old &lsquo;rails g figaro:install&rsquo; command
no longer works. Use the new &lsquo;figaro install&rsquo; to get application.yml and ignored.</em><br>
<em>Note: g is short for generate.</em><br><br>
Now it&rsquo;s time for the magic.<br>
Open up <em>&lsquo;./config/application.yml&rsquo;</em>.
I&rsquo;ll be assuming that you are trying to setup a mailer and need your Gmail
username and password.</p>

<figure class='code'><figcaption><span>config/application.yml</span><a href='https://github.com/laserlemon/figaro'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">GMAIL_USERNAME</span><span class="p">:</span> <span class="n">testdummy</span><span class="vi">@gmail</span><span class="o">.</span><span class="n">com</span>
</span><span class='line'><span class="ss">GMAIL_PASSWORD</span><span class="p">:</span> <span class="n">password123456</span>
</span></code></pre></td></tr></table></div></figure>


<p>These files are now able to be accessed via
<a href="http://www.ruby-doc.org/core-2.1.2/ENV.html">Environment Variables</a>.
Environment variables can be called in any of your rails files.
Normally, you can access Environment Variables one way.</p>

<figure class='code'><figcaption><span>Ruby Code</span><a href='https://github.com/laserlemon/figaro'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">ENV</span><span class="o">[</span><span class="s2">&quot;GMAIL_USERNAME&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Note: All Caps are critical.</em><br><br>
This will render <em>testdummy@gmail.com</em> wherever the environment variable is
envoked.
A way of calling environment variables through Figaro is to use their syntax.</p>

<figure class='code'><figcaption><span>Ruby Code</span><a href='https://github.com/laserlemon/figaro'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Figaro</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">gmail_username</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now instead of caps, brackets, and quotations; it is a simple method call.</p>

<h3>Multiple Environments</h3>


<p>Figaro allows the use of different variables in different environments.
For example, in the Gmail example; let&rsquo;s say you want to have a test email
address for development, but a special email account for production emails.
For figaro it&rsquo;s a simple setup.</p>

<figure class='code'><figcaption><span>config/application.yml</span><a href='https://github.com/laserlemon/figaro'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">development</span><span class="p">:</span>
</span><span class='line'>  <span class="ss">GMAIL_USERNAME</span><span class="p">:</span> <span class="n">testdummy</span><span class="vi">@gmail</span><span class="o">.</span><span class="n">com</span>
</span><span class='line'>  <span class="ss">GMAIL_PASSWORD</span><span class="p">:</span> <span class="n">password123456</span>
</span><span class='line'><span class="ss">production</span><span class="p">:</span>
</span><span class='line'>  <span class="ss">GMAIL_USERNAME</span><span class="p">:</span> <span class="n">superawesome</span><span class="vi">@gmail</span><span class="o">.</span><span class="n">com</span>
</span><span class='line'>  <span class="ss">GMAIL_PASSWORD</span><span class="p">:</span> <span class="n">W</span><span class="vg">$aIk91</span><span class="err">@</span><span class="mi">45</span><span class="o">*</span><span class="n">lkM</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Note: The indentation is critical.</em><br><br>
That is all.<br>
Figaro and Rails will know which environment you&rsquo;re in and use that particular
username and password.</p>

<h3>Setting up for Heroku</h3>


<p>Let&rsquo;s say that you are wanting to deploy your app through Heroku, but don&rsquo;t know
how the environment variables can be setup on the remote server.<br>
No fear!<br>
A simple command and figaro will take care of it for you.</p>

<figure class='code'><figcaption><span>Terminal</span><a href='https://github.com/laserlemon/figaro'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">rake figaro:heroku</span>
</span></code></pre></td></tr></table></div></figure>


<p>BOOM.<br>
Your environment variables have been setup on Heroku.
If you wanted to confirm that they&rsquo;re setup all nice and tidy.
After deploying to heroku, <a href="https://devcenter.heroku.com/articles/config-vars">type in the command</a>.</p>

<figure class='code'><figcaption><span>Terminal</span><a href='https://github.com/laserlemon/figaro'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">heroku config</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Go Play!</h3>


<p>Now figaro has been installed on your Rails app, you can deploy easily to heroku,
and your information has not been compromised.
I&rsquo;d call that a pretty good day.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Twitter Bootstrap Rails]]></title>
    <link href="http://andrewhouse.github.io/blog/2014/08/13/twitter-bootstrap-rails/"/>
    <updated>2014-08-13T17:38:02-04:00</updated>
    <id>http://andrewhouse.github.io/blog/2014/08/13/twitter-bootstrap-rails</id>
    <content type="html"><![CDATA[<p>Being entirely void of creativity, the <a href="https://github.com/seyhunak/twitter-bootstrap-rails">Twitter Bootstrap Rails Gem</a>
is amazing.<br>
I use Twitter Bootstrap(bootstrap for short) to generate basic layouts so I
can get a handle on how things can possibly look.
Not to mention, it gives an amazing starting point for building good looking css.
If you visit the <a href="http://getbootstrap.com/components/">Twitter Bootstrap Home Page</a>,
you can see all of the styles you can create.
If you are a beginniner, ignore anything and everything Javascript related.
Stick primarily to the CSS and Components page and customize your page with
their features.
A little pizzazz goes a long way ya&#8217; know. <br></p>

<h3>Getting Started</h3>


<p>I am assuming that you have a new rails project and are looking to add bootstrap
to that project.<br><br>
Let&rsquo;s start by adding the &lsquo;twitter-bootstrap-rails&rsquo; gem to the Gemfile.</p>

<figure class='code'><figcaption><span>Gemfile</span><a href='https://github.com/seyhunak/twitter-bootstrap-rails'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;twitter-bootstrap-rails&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<!-- more -->


<p><strong>ALWAYS</strong> After you update your Gemfile in any way, run bundler.
Now open up your terminal/iTerm/command prompt.
The rest of generating default bootstrap logic will be done from the terminal.</p>

<figure class='code'><figcaption><span>Terminal</span><a href='https://github.com/seyhunak/twitter-bootstrap-rails'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bundle install
</span></code></pre></td></tr></table></div></figure>


<p><em>Note: bundle is shorthand for bundle install.</em><br><br>
Next, we need to generate the bootstrap into our Rails app.</p>

<figure class='code'><figcaption><span>Terminal</span><a href='https://github.com/seyhunak/twitter-bootstrap-rails'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rails generate bootstrap:install static
</span></code></pre></td></tr></table></div></figure>


<p><em>Note: g is shorthand for generate when Rails is the context.</em></p>

<h3>Generating the Default Layout Page</h3>


<p>Now bootstrap has been installed into your Rails app and you can access bootstrap
logic if you want to completely customize your page.
However, bootstrap can help generate default layouts for your application.html page and
the generated views.<br>
In order to generate a default layout page, you need to run the following.</p>

<figure class='code'><figcaption><span>Terminal</span><a href='https://github.com/seyhunak/twitter-bootstrap-rails'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rails g bootstrap:layout application fluid -f
</span></code></pre></td></tr></table></div></figure>


<p><em>Note: You can run the code without the -f flag. All the flag will do is force the changes
so you don&rsquo;t have to repeatedly say yes to every little thing.</em><br><br>
<em>Note: If you have installed haml or slim and your application file uses those tags,
then bootstrap will install the layout in that format. Cool right?</em><br><br>
Now if you look at your application.html.erb(if you&rsquo;re using erb) you will notice
the drastic change to the html. Don&rsquo;t be afraid of all of the head logic.
Most of it is for mobile and meta data.
If you wanted to go ahead and customize your layout page, you can use
the css or components on the <a href="http://getbootstrap.com/components/">Twitter Bootstrap Page</a>.
If there are other types of bootstrap that you want to change.
For example, you hate the color of when you hover over your title on the navbar.
To make changes directly to the css go to <em>&lsquo;./app/assets/stylesheets/bootstrap_and_overrides.css&rsquo;</em>
and make your customizations there.<br></p>

<h3>Simple Form</h3>


<p>If you are using <a href="https://github.com/plataformatec/simple_form">Simple Form</a>,
there is a bootstrap generator for simple form. If you are thinking about
using simple form, do so <strong>before</strong> installing the default views. If not,
the view forms will be installed in the default form format.</p>

<figure class='code'><figcaption><span>Gemfile</span><a href='https://github.com/plataformatec/simple_form'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;simple_form&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Note: Remember to bundle after changing the Gemfile.</em><br></p>

<figure class='code'><figcaption><span>Terminal</span><a href='https://github.com/seyhunak/twitter-bootstrap-rails'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bundle
</span><span class='line'>rails g simple_form:install --bootstrap
</span></code></pre></td></tr></table></div></figure>


<h3>Generating Default Views</h3>


<p>The synax for changing the layout of a set of views are.</p>

<figure class='code'><figcaption><span>Terminal</span><a href='https://github.com/seyhunak/twitter-bootstrap-rails'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rails g bootstrap:themed <span class="o">[</span>RESOURCE_NAME<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Resource name is the name of the <em>controller</em> of which you would like the views
changed. Let&rsquo;s say that you want to make a Posts controller.</p>

<figure class='code'><figcaption><span>Terminal</span><a href='https://github.com/seyhunak/twitter-bootstrap-rails'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rails g scaffold post title:string content:text
</span><span class='line'>rake db:migrate
</span><span class='line'>rails g bootstrap:themed posts -f
</span></code></pre></td></tr></table></div></figure>


<p><em>Note: The pluralization is critical.</em><br><br>
<em>Note: Once again, the -f flag is just for saving precious time, it&rsquo;s not necessary.</em><br><br>
Now if you look at the views under <em>&lsquo;./app/views/posts&rsquo;</em> the index and show will now be
in table format. The new and edit views will render the form page.
The form will have a great starting layout. <br></p>

<h3>Now the fun begins!</h3>


<p>This is the true starting point for customizing your page however you want.
The basics have been done, now you don&rsquo;t have an ugly beginning point.
Once again, reference the <a href="http://getbootstrap.com/components/">Twitter Bootstrap Page</a>
and make every little detail your own.</p>
]]></content>
  </entry>
  
</feed>
